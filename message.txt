{ __v: 10,
  _id: 54970f7d68284bd3169e3237,
  name: '百度FEX的博客',
  url: 'http://fex.baidu.com/feed.xml',
  articles: 
   [ { _id: 54970f7fee3442d416adbed8,
       title: '又一个强大的 FIS 解决方案 jello',
       link: 'http://fex.baidu.com/blog/2014/11/another-fis-solusition-jello/',
       date: Mon Nov 24 2014 08:00:00 GMT+0800 (CST),
       description: '作者：2betop <br> <p><strong>又一个</strong>？是的！<a href="http://oak.baidu.com/">基于 FIS 的解决方案</a>已经有不少，有针对后端是 <a href="http://oak.baidu.com/docs/fis-plus">php 的 fisp</a>、<a href="http://oak.baidu.com/docs/yogurt">node.js 的 yogurt</a> 和 <a href="http://oak.baidu.com/docs/gois">GO 语言的 Gois</a>，甚至更多。而接下来介绍的这个就是一个针对后端是 JAVA 采用 velocity 作为模板引擎的 <a href="https://github.com/fex-team/jello">jello</a>。虽然出来有一段时间了，但是一直以来都没有很好的介绍过，希望借助这次机会能让大家更清楚地认识一下 <a href="https://github.com/fex-team/jello">jello</a>。</p>\n\n<h2>Features</h2>\n\n<h3>前后端分离</h3>\n\n<p>这里有两层意义的前后分离。</p>\n\n<ol>\n<li><p>前后端编写分离</p>\n\n<p>由于采用的是 velocity 作为模板引擎，前端同学只用专注于 JS、CSS 以及模板逻辑的编写，而不用太关心后端数据以及页面逻辑。而后端同学则只需专注于后端页面应该渲染哪个模板，以及获取对应的模板数据。</p></li>\n<li><p>前后端开发分离</p>\n\n<p>这个是 Jello 的重点！正常来说，一个页面的正常渲染是离不开模板数据的，而页面模板数据的来源，往往都需要后端同学来提供。因此，前端的开发往往受后端的限制，需要等待后端提供一个可用的环境，然后基于此环境开发。而此环境，要让一个没有后端 j2ee 基础的同学来搭建，也是一件非常头疼的事情。</p>\n\n<p>Jello 针对这个问题，提供一个非常便利的开发环境。即：所有的 page 性质的 vm 模板文件，可以在此环境中直接预览，而且可以通过 json 或者 jsp 文件提供数据模拟。于是，项目开始前期，前后端的同学合力一起制定好数据接口，然后就可以并行独立开发了。具体操作可以查看<a href="http://106.186.23.103:8080/doc/rewrite">页面预览</a>和<a href="http://106.186.23.103:8080/doc/binding">数据绑定</a>相关的文档。</p></li>\n</ol>\n\n<h3>简化环境安装</h3>\n\n<p>传统的开发，为了能够正常开发，往往需要安装一系列 j2ee 环境。而 jello 提供的开发环境，只需要 <code>jello server start</code> 一个命令便能运行。实际上它是内嵌了一个简单个 tomcat 服务，在首次运行的时候，自动从服务器上下载。</p>\n\n<p>因为所有的数据都是 mock 出来的，这也就无需去折腾 mysql 或者 oracle 或者其他数据库了。</p>\n\n<p><img src="/img/another-fis-solusition-jello/image2.png" alt="image2"></p>\n\n<h3>自动性能优化</h3>\n\n<p>我们基于 <a href="http://velocity.apache.org/">velocity</a> 扩展了些标签 (directive)，如：html、head、body、script、style、widget... 如果你采用我们提供的标签 (directive) 组织代码，无论按什么顺序组织，我们可以保证所有 css 内容集中在头部输出，所有的 js 集中在底部输出，以达到一个性能优化的效果。</p>\n\n<p>另外结合打包配置，可以让多个 js/css 资源合并成一个文件，更大程度的优化性能。</p>\n\n<p><img src="/img/another-fis-solusition-jello/image1.png" alt="image1"></p>\n\n<p>(这个示例没有配置 css  打包，请忽略。)</p>\n\n<h3>模板继承机制</h3>\n\n<p>扩展 velocity 实现类 smarty 的模板继承功能，让模板能够得到更充分的复用。</p>\n\n<p>将多个页面间相同的部分提取到一个骨架 layout.vm 文件里面，每个页面只需填充自己独有的内容。</p>\n\n<p>此模板继承甚至比 smarty 提供的版本还要强，因为 velocity 里面可以支持条件语句。比如这个<a href="http://106.186.23.103:8080/doc/layout">Demo</a>.</p>\n<div class="highlight"><pre><code class="language-velocity" data-lang="velocity"><span class="cp">#</span><span class="nf">set</span><span class="p">($</span><span class="nv">layout</span> <span class="o">=</span> <span class="s2">&quot;page/layout/2columns-with-left-sidebar.vm&quot;</span><span class="p">)</span><span class="x"></span>\n<span class="cp">#</span><span class="nf">set</span><span class="p">($</span><span class="nv">param</span> <span class="o">=</span> <span class="p">$</span><span class="nv">request</span><span class="p">.</span><span class="nv">getParameter</span><span class="p">(</span><span class="s2">&quot;layout&quot;</span><span class="p">))</span><span class="x"></span>\n\n<span class="cp">#</span><span class="nf">if</span><span class="p"> ($</span><span class="nv">param</span><span class="p">.</span><span class="nv">equals</span><span class="p">(</span><span class="s2">&quot;right&quot;</span><span class="p">))</span><span class="x"></span>\n<span class="x">    </span><span class="cp">#</span><span class="nf">set</span><span class="p">($</span><span class="nv">layout</span> <span class="o">=</span> <span class="s2">&quot;page/layout/2columns-with-right-sidebar.vm&quot;</span><span class="p">)</span><span class="x"></span>\n<span class="cp">#</span><span class="nf">end</span><span class="x"></span>\n\n<span class="cp">#</span><span class="nf">if</span><span class="p"> ($</span><span class="nv">param</span><span class="p">.</span><span class="nv">equals</span><span class="p">(</span><span class="s2">&quot;both&quot;</span><span class="p">))</span><span class="x"></span>\n<span class="x">    </span><span class="cp">#</span><span class="nf">set</span><span class="p">($</span><span class="nv">layout</span> <span class="o">=</span> <span class="s2">&quot;page/layout/3columns.vm&quot;</span><span class="p">)</span><span class="x"></span>\n<span class="cp">#</span><span class="nf">end</span><span class="x"></span>\n\n<span class="cp">#</span><span class="nf">extends</span><span class="p">($</span><span class="nv">layout</span><span class="p">)</span><span class="x"></span>\n<span class="x">    ...</span>\n<span class="cp">#</span><span class="nf">end</span><span class="x"></span>\n</code></pre></div>\n<p><img src="/img/another-fis-solusition-jello/image3.png" alt="image3"></p>\n\n<h3>模块化开发</h3>\n\n<p>提供模块化开发机制，支持像想写 node.js 一样的方式去写页面 js。可以遵循 commonjs 规范任意拆分代码，而不用关心性能问题。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bootstrap&#39;</span><span class="p">);</span>\n<span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>\n<span class="kd">var</span> <span class="nx">alert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;libs/alert&#39;</span><span class="p">);</span>\n\n<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">)</span> <span class="p">{</span>\n\n    <span class="c1">// from velocity data</span>\n    <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="nx">opt</span><span class="p">.</span><span class="nx">vm</span><span class="p">;</span>\n    <span class="nx">$</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">btn</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;&lt;pre&gt;&#39;</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">);</span>\n    <span class="p">});</span>\n\n    <span class="c1">// ....</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>以上代码来自 <a href="https://github.com/2betop/jello-demo">jello-demo</a> 下面的 /page/examples/data.js, 可以直接在线体验<a href="http://106.186.23.103:8080/examples/data">运行结果</a>。</p>\n\n<h3>组件化开发</h3>\n\n<p>提供组件化机制，可以将页面间复用率比较高的内容，封装成组件（widget），然后通过 #widget() 标签使用，支持传入局部变量， 更多关于组件的使用，请参看<a href="http://106.186.23.103:8080/doc/widget">jello-demo</a> 中文档。</p>\n\n<h3>更多 features.</h3>\n\n<p>因为是基于 <a href="http://fis.baidu.com/">fis</a> 的二次开发，还有更多的 fetaures 也可以在 jello 中使用，如：前端三种语言能力、资源压缩、异构语言支持、静态资源加 md5 戳 &amp; cdn 部署 等等。具体请查看 <a href="http://fis.baidu.com/">fis 官网</a>。</p>\n\n<h2>Getting started</h2>\n\n<p>如果以上的 features 也打动了你，不妨从一个简单的 <a href="http://106.186.23.103:8080/doc/widget">demo</a> 开始 jello 之旅吧。</p>\n\n<ol>\n<li><p>安装 jello</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g jello\n</code></pre></div></li>\n<li><p>安装插件</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g fis-parser-marked\nnpm install -g fis-parser-utc\nnpm install -g fis-parser-sass\nnpm install -g fis-packager-depscombine\n</code></pre></div></li>\n<li><p>下载  demo</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g lights\nlights install jello-demo\n\n#  或者\n\ngit clone https://github.com/2betop/jello-demo.git\n</code></pre></div></li>\n<li><p>进入当前目录后发布代码</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">jello release\njello server start\n</code></pre></div></li>\n<li><p>自动打开浏览器预览页面</p></li>\n</ol>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbed9,
       title: '当 AMD 遇上 FIS',
       link: 'http://fex.baidu.com/blog/2014/11/when-amd-meet-fis/',
       date: Thu Nov 20 2014 08:00:00 GMT+0800 (CST),
       description: '作者：2betop <br> <h2>前言</h2>\n\n<p>也许说 <a href="https://github.com/amdjs/amdjs-api">AMD</a> 不知道这是啥，但说 <a href="http://requirejs.org/">requirejs</a> 就都懂了。没错 <a href="https://github.com/amdjs/amdjs-api">AMD</a> 就是一种模块定义的接口（API），用来定义模块间依赖以及自身暴露什么内容的一种规范。而 <a href="http://requirejs.org/">requirejs</a> 就是一种实现了这些接口的 AMD Loader。</p>\n\n<p>说到 <a href="http://requirejs.org/">requirejs</a> 相信不少人都已经对它爱不释手了，它真是给我们的开发带来了不少便利性。只要我们每个模块都简单的遵守这个规则</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// app.js</span>\n<span class="nx">define</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>\n    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">);</span>\n\n    <span class="nx">exports</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>然后，简单一段</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// 程序入口</span>\n<span class="nx">require</span><span class="p">([</span><span class="s1">&#39;/app&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">app</span><span class="p">.</span><span class="nx">action</span><span class="p">();</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>就把指定的所有依赖都自动加载进来了。</p>\n\n<p>于是，我们慢慢的会把一个大功能模块，拆得非常小，让每一个模块都只干最少的事，而且我们很享受这样的拆分，因为这样带给我们非常棒的可维护性。</p>\n\n<h2>问题</h2>\n\n<p>当我们把代码拆得非常小之后，直接用 requirejs 去加载的时候，很容就会出现这种情况。</p>\n\n<p><img src="/img/when-amd-meet-fis/image1.png" alt="image1"></p>\n\n<p>性能好不好，可想而知。 于是乎，我们需要把这些依赖打包起来。如何打包？当然是 <a href="http://requirejs.org/docs/optimization.html">r.js</a> 他提供一种指定入口文件将所有的依赖打包成一个文件的工具。常用的做法是，配置一个列表给每个入口程序都打成一个文件, 然后手动把所有的入口文件地址换成打包后的。</p>\n\n<p>这样基本上能满足需求，但是仍然还有些问题？</p>\n\n<ul>\n<li>每个入口及其依赖打成了一个包，多个页面间公用的依赖被打包到了多处，页面切换公用依赖的缓存完全没有被利用起来。</li>\n<li>每个入口地址我都得手动替换新地址，麻烦！</li>\n<li>有些 amd 模块写法，需要 requirejs 在运行期需要将 function 转成字符分析依赖，性能会不会有问题？</li>\n</ul>\n\n<h2>优化方案</h2>\n\n<p>如果你使用 <a href="http://fis.baidu.com">FIS</a>, 这些问题就都迎刃而解，而且还能带来其他更多的好处。你可以先试用一下这个 <a href="https://github.com/fex-team/fis-amd-demo">fis amd demo</a>。然后，让我让我来细说 fis 针对 amd 模块做了哪些优化以及在 fis中使用将带来哪些好处。</p>\n\n<h2>全新的编译插件</h2>\n\n<p>使用过 fis mod.js 方案的同学应该知道。原来对 js 模块依赖的解析只是简单粗暴的分析了两种用法。</p>\n\n<p>即：</p>\n\n<ol>\n<li><code>require(&#39;xxxx&#39;)</code></li>\n<li><code>require.async(&#39;xxxx&#39;, cb);</code></li>\n</ol>\n\n<p>将依赖生成 map.json, 然后，模块定义就是让用户去遵循 commonjs 规范，FIS 在编译期会自动封装成 amd module，其实就是包了一层 <code>define</code></p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">define</span><span class="p">(</span><span class="nx">moduleId</span><span class="p">,</span> <span class="nx">funciton</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 源 JS 内容。</span>\n    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>\n    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">);</span>\n\n    <span class="nx">exports</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>在页面渲染的时候，程序会根据 map.json 中依赖的申明，提前把同步依赖加载进来。</p>\n\n<p>其实这样已经满足各种开发需求了，而且非常高效实用。但是随着外界开源组件的兴起以及 bower 的推广，目前已有大量的第三方组件涌现，而且他们都有一个特点，就是采用的 amd 规范。问题就是，这些组件拿过来放在 fis 中，没法直接用，必须得手动修改才能使用。</p>\n\n<p>于是，全新的 <a href="https://github.com/fex-team/fis-postprocessor-amd">amd 依赖解析插件</a> 诞生了。</p>\n\n<p>它会分析所有 <a href="https://github.com/amdjs/amdjs-api">AMD</a> 规范中定义的各种写法。</p>\n\n<p>有了它，模块间的依赖实际上在编译期就已经知道了，并把的依赖关系生成到了 <a href="http://fis.baidu.com/docs/more/mapjson.html">map.json</a>, 这样只要借助工具，就可以提前把所需模块的全部依赖提前加载进来，而不需要让 requirejs 在前端用 js 去动态加载。</p>\n\n<p>怎么让 requirejs 不重复加载？只要提前加载进来的模块，都带上 module id, 然后 require 入口引用的 module id 与之一致，requirejs 是不会重复加载的。这个自动补充 module id 的工作在这个插件中自动完成了，默认是自动把该文件在工程下面的路径去掉 .js 后缀的值作为 module id。</p>\n\n<p>有了这些依赖信息，我们还可以利用 combo 或者 <a href="http://fis.baidu.com/docs/api/fis-conf.html#pack">pack 打包</a> 将依赖合成一个文件输出，这样就减少了多个请求带来的网络开销，以后可以愉快拆分模块代码了。</p>\n\n<h2>更好的模块化开发体验</h2>\n\n<p>一个大型的项目，一般情况都会包括三种类型的模块。</p>\n\n<ol>\n<li>第三方模块</li>\n<li>当前项目可公用的模块</li>\n<li>应用级模块，每个页面都不一样。</li>\n</ol>\n\n<p>针对这三种性质的模块，我们都比较喜欢放在不同的目录。这样带来的坏处是，不管我用绝对定位还是相对定位，都是如此的别扭。</p>\n\n<p>感谢 <a href="https://github.com/amdjs/amdjs-api">AMD</a> 规范中制定了3个非常便于查找模块路径的配置, 我们把这几个配置也应用到了编译期。</p>\n\n<p>通过fis.config.set(&#39;settings.postprocessor.amd&#39;) 来设置。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">fis</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;settings.postprocessor.amd&#39;</span><span class="p">,</span> <span class="p">{</span>\n    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>\n\n    <span class="c1">// 查看：https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#paths-</span>\n    <span class="c1">// 不同的是，这是编译期处理，路径请填写编译路径。</span>\n    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>\n        <span class="nx">jquery</span><span class="o">:</span> <span class="s1">&#39;modules/libs/jquery/jquery.js&#39;</span><span class="p">,</span>\n        <span class="nx">bootstrap</span><span class="o">:</span> <span class="s1">&#39;modules/libs/bootstrap/js/bootstrap.js&#39;</span><span class="p">,</span>\n        <span class="nx">jqueryui</span><span class="o">:</span> <span class="s1">&#39;modules/libs/jquery-ui/ui/&#39;</span><span class="p">,</span>\n        <span class="nx">app</span><span class="o">:</span> <span class="s1">&#39;./modules/app&#39;</span><span class="p">,</span>\n        <span class="nx">css</span><span class="o">:</span> <span class="s1">&#39;./modules/css.js&#39;</span>\n    <span class="p">},</span>\n\n    <span class="c1">// 查看：https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#packages-</span>\n    <span class="c1">// 不同的是，这是编译期处理，路径请填写编译路径。</span>\n    <span class="nx">packages</span><span class="o">:</span> <span class="p">[</span>\n\n        <span class="p">{</span>\n            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zrender&#39;</span><span class="p">,</span>\n            <span class="nx">location</span><span class="o">:</span> <span class="s1">&#39;modules/libs/zrender&#39;</span><span class="p">,</span>\n            <span class="nx">main</span><span class="o">:</span> <span class="s1">&#39;zrender&#39;</span>\n        <span class="p">},</span>\n\n        <span class="p">{</span>\n            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;echarts&#39;</span><span class="p">,</span>\n            <span class="nx">location</span><span class="o">:</span> <span class="s1">&#39;modules/libs/echarts&#39;</span><span class="p">,</span>\n            <span class="nx">main</span><span class="o">:</span> <span class="s1">&#39;echarts&#39;</span>\n        <span class="p">}</span>\n    <span class="p">]</span>\n<span class="p">});</span>\n</code></pre></div>\n<h3><a href="https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#baseurl-">baseUrl</a></h3>\n\n<p>当设置了 baseUrl 后，所有绝对路径的模块查找都是基于此目录查找的，对于使用频率比较高的模块，可以把改目录设置成 baseUrl. 比如第三类模块。</p>\n\n<h3><a href="https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#paths-">paths</a></h3>\n\n<p>对于一些常用的库，可以通过这个来设置短引用或者说别名。比如： <code>jquery</code>, <code>bootstrap</code>。</p>\n\n<p>另外需要说明的是，有些第三方库在发布的时候，都是指定的别名依赖。如： jquery-ui 一系列。这种模块有很多很多。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span><span class="p">(</span> <span class="nx">factory</span> <span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span> <span class="p">)</span> <span class="p">{</span>\n\n        <span class="c1">// AMD. Register as an anonymous module.</span>\n        <span class="nx">define</span><span class="p">([</span>\n            <span class="s2">&quot;jquery&quot;</span><span class="p">,</span>\n            <span class="s2">&quot;./core&quot;</span><span class="p">,</span>\n            <span class="s2">&quot;./widget&quot;</span><span class="p">,</span>\n            <span class="s2">&quot;./position&quot;</span>\n        <span class="p">],</span> <span class="nx">factory</span> <span class="p">);</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n\n        <span class="c1">// Browser globals</span>\n        <span class="nx">factory</span><span class="p">(</span> <span class="nx">jQuery</span> <span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">}(</span><span class="kd">function</span><span class="p">(</span> <span class="nx">$</span> <span class="p">)</span> <span class="p">{</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>所以，为了不动第三方源码，我们也需要明确的设置这个别名。</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">paths: {\n    jquery: &#39;modules/libs/jquery/jquery.js&#39;\n}\n</code></pre></div>\n<p>其次，我们可以给这类性质的“当前项目可公用的模块”，设置个 paths. 如:</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">paths: {\n    libs: &#39;/widget/libs/&#39;\n}\n</code></pre></div>\n<p>这样对于内部公共模块目录下模块的引用无论你的代码在什么位置就可以这样引用。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">define</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">dialog</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;libs/dialog&#39;</span><span class="p">);</span>\n    <span class="p">...</span>\n<span class="p">});</span>\n</code></pre></div>\n<h3><a href="https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#packages-">packages</a></h3>\n\n<p>作用基本上和 <a href="https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#paths-">paths</a> 差不多，只是它更适合配置成一个完整的模块包。如 zrender、echarts 等等。</p>\n\n<h2>更智能的包装</h2>\n\n<p>在 FIS 开发环境中，你还可以编写满足 commonjs 规范的 js 模块，FIS 会自动包装成 AMD 模块以便于在浏览器中运行。如果直接就是 AMD 规范编写的，那就更不用说了。但是既不是 amd, 也不是 commonJS 规范的模块怎么办呢？</p>\n\n<p>再次感谢 AMD 规范中的 <a href="https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#shim-">shim</a> 配置，同样，FIS 把这个配置应用到了编译期。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">fis</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;settings.postprocessor.amd&#39;</span><span class="p">,</span> <span class="p">{</span>\n    <span class="c1">// 设置 bootstrap 依赖 jquery</span>\n    <span class="c1">// 更多用法见：https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#shim-</span>\n    <span class="c1">// key 为编译期路径。</span>\n    <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>\n        <span class="s1">&#39;modules/libs/bootstrap/js/bootstrap.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">],</span>\n\n        <span class="s1">&#39;some/ohther/path.js&#39;</span><span class="o">:</span> <span class="p">{</span>\n            <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;libs/a&#39;</span><span class="p">,</span> <span class="s1">&#39;libs/b&#39;</span><span class="p">],</span>\n            <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;some.thing&#39;</span><span class="p">,</span>\n            <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>\n                <span class="k">return</span> <span class="nx">some</span><span class="p">.</span><span class="nx">thing</span> <span class="o">+</span> <span class="s1">&#39;another&#39;</span><span class="p">;</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>FIS 在包装模块组件的时候，会读取此配置，自动把改模块的依赖和暴露的对象添加上。当然 requirejs 本来也能做这个事，但是考虑到性能开销，这个工作更应该在编译期完成。</p>\n\n<h2>更高级的插件加载机制</h2>\n\n<p>AMD 除了可以处理 JS 模块依赖加载，还能处理其他依赖加载，怎么做？就是利用 <a href="https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md">amd plugin loader</a></p>\n\n<p>换句话说 amd 还可以用来加载 css or 前端 tpl。在 <a href="https://github.com/fex-team/fis-amd-demo">fis amd demo</a> 例子中有个示例，就是利用 css amd 插件来动态加载 css 文件。<a href="https://github.com/fex-team/fis-postprocessor-amd">amd 依赖解析插件</a> 不仅只处理模块查找，还处理插件资源查找。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">require</span><span class="p">([</span><span class="s1">&#39;css!./styles/demo.css&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>\n    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;main&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div id=&quot;demo&quot;&gt;It works!&lt;/div&gt;&#39;</span><span class="p">;</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>这样的好处是，对于当前工程下面的静态资源引用，可以用相对路径，也可以用绝对路径，且可以给资源加 md5 戳，甚至可以最终部署到 cdn 上，而不用改一句源码。</p>\n\n<h2>更智能的打包</h2>\n\n<p><a href="http://fis.baidu.com/docs/api/fis-conf.html#pack">FIS 的 pack</a> 打包方案本来就比较灵活，通过正则或者 glob语法，可以把任意多的文件合并成一个。同时当使用 <a href="https://github.com/fex-team/fis-packager-depscombine">depscombine 插件</a>的时候也支持 r.js 那种方式，将入口文件的所有依赖合并进来，只要在合并入口 JS 依赖前，配置一条规则把公用依赖部分的 js 合并成一个文件，就能把公共依赖抽离出来，这样公共的部分缓存就可以被利用起来。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">fis</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;pack&#39;</span><span class="p">,</span> <span class="p">{</span>\n    <span class="c1">// 依赖也会自动打包进来, 且可以通过控制前后顺来来定制打包，后面的匹配结果如果已经在前面匹配过，将自动忽略。</span>\n    <span class="s1">&#39;pkg/zrender.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;modules/libs/zrender/zrender.js&#39;</span><span class="p">],</span>\n    <span class="s1">&#39;pkg/echarts.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;modules/libs/echarts/echarts.js&#39;</span><span class="p">],</span>\n\n    <span class="s1">&#39;pkg/bootstrap_jquery.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;modules/libs/bootstrap/js/bootstrap.js&#39;</span><span class="p">],</span>\n\n    <span class="s1">&#39;pkg/jquery_ui_tabs.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;modules/libs/jquery-ui/ui/tabs.js&#39;</span><span class="p">]</span>\n<span class="p">});</span>\n</code></pre></div>\n<p><img src="/img/when-amd-meet-fis/image2.png" alt="image2"></p>\n\n<p>当配置好规则后，简单的一个 <code>fis release -p</code> 命令就把所有被打包文件的请求变成合并后的了，源码什么都不用改，如果想愉快的调试代码，release 时不带 <code>-p</code> 参数，又自动变成了非打包方案了。</p>\n\n<h2>被遗忘的技术细节</h2>\n\n<p>现在 require 入口调用，会自动把其同步依赖加载进来。但是，等等，貌似怪怪的，因为 require 入口的调用其语义就是异步调用，怎么变成同步的语义了？</p>\n\n<p>按语义来应该针对 require(&#39;deps&#39;) 引用做同步处理，但是这种用法并不在 amd 规范中定义，amd  规范定义的同步调用用法，只出现在模块定义内部。所以没办法，把模块定义外的 require 用法当成同步来用吧（模块定义内部的 require 异步语义保持不变）。当然一定要当作异步来用也是可以的，只要在 require 调用的前面加段注释 fis async。这样编译期就会把找到依赖标记成异步依赖。</p>\n\n<p>由于 FIS 对于静态文件是支持打包合并、加 md5 戳和部署到 cdn 的，也就是对于 js 的引用，我们是要忽略他的 release 后的路径的。如果纯同步依赖，似乎没问题，但是异步依赖怎么办呢？我在  require 里面的 module id 当然还是得用源码路径ID方便调试定位。</p>\n\n<p>那么怎么转换路径呢？</p>\n\n<p>原来 mod.js 方案是读取 <code>map.json</code> 生成一个异步所需的 resoucemap 表，通过 require.resourceMap({xxx}) 设置给 mod.js，这样在异步加载模块的时候，可以对应找到实际的存放地址。</p>\n\n<p>amd 方案里面也是采用同样的方式，只是利用的是 amd 规范中的 <a href="https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#paths-">paths</a> 设置，根据 map.json 自动生成程序中所需要的异步依赖的路径转换规则，这样的话，fis 不是一定只能用 mod.js 才能做模块化开发，只要满足 amd 规范的所有 loader 都能支持，比如 ecom 出的 <a href="https://github.com/ecomfe/esl">esl.js</a>;</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="s2">&quot;paths&quot;</span><span class="o">:</span><span class="p">{</span>\n    <span class="s2">&quot;modules/libs/zrender/lib/excanvas&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/util&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/config&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/log&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/guid&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/env&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/event&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/Handler&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/matrix&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/mixin/Transformable&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/color&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Base&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Path&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/area&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Text&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Rectangle&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/loadingEffect/Base&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Image&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/Painter&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Group&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/Storage&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/animation/easing&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/animation/Clip&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/animation/Animation&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/zrender&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/zrender&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Circle&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/echarts&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/tool/math&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/echarts&quot;</span><span class="p">,</span>\n    <span class="s2">&quot;modules/libs/zrender/shape/Ring&quot;</span><span class="o">:</span> <span class="s2">&quot;/pkg/echarts&quot;</span><span class="p">,</span>\n    <span class="p">...</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>另外，<a href="https://github.com/fex-team/fis-postprocessor-amd">amd 依赖解析插件</a> 除了解析依赖，实际还会做一个小优化，就是会把 factory  中的各种依赖，提前放置在 define 的第二个参数里面。这样的好处是， amd loader 再也不需要用正则查找 factory 函数体的 require 了，直接读第二个参数就能把所有依赖拿到。</p>\n\n<h2>总结</h2>\n\n<p>既然 fis 在编译 amd 模块的时候，优化了这么多，依赖处理啊， ID 生成啊之类的。那么我们还需要一个如此庞大的 require.js 吗？ 当然不需要，FIS 组结合编译的处理，提供一个最小 amd loader 叫 <a href="https://github.com/fex-team/mod/blob/master/mod-amd.js">mod-amd.js</a> 仅仅 200 多行,  但是他暂时不支持 amd plugin loader，因为没有足够的理由要去支持它，像模板加载，样式加载，fis 中有更优的处理方案。</p>\n\n<p>好吧，回头正视原来提出的那些问题。</p>\n\n<ul>\n<li><blockquote>\n<p>每个入口及其依赖打成了一个包，多个页面间公用的依赖被打包到了多处，页面切换公用依赖的缓存完全没有被利用起来。</p>\n</blockquote>\n\n<p>采用 fis pack 打包配置，很好的解决这个问题。</p></li>\n<li><blockquote>\n<p>每个入口地址我都得手动替换新地址，麻烦！</p>\n</blockquote>\n\n<p>在 fis 里面编译的时候加上 -p 就足够。</p></li>\n<li><blockquote>\n<p>有些 amd 模块写法，需要 requirejs 在运行期需要将 function 转成字符分析依赖，性能会不会有问题？</p>\n</blockquote>\n\n<p>编译期，自动将依赖前置。</p></li>\n</ul>\n\n<p>Ok，今天先写到这，有说得不对的，欢淫吐槽。</p>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbedb,
       title: 'jdists 前端代码块预处理工具',
       link: 'http://fex.baidu.com/blog/2014/10/jdists/',
       date: Tue Oct 28 2014 08:00:00 GMT+0800 (CST),
       description: '作者：zswang <br> <h2>什么是 jdists</h2>\n\n<p>项目地址：<a href="https://github.com/zswang/jdists">https://github.com/zswang/jdists</a></p>\n\n<h3>关于命名</h3>\n\n<p>j <strong>dist</strong> s 就是 <code>js</code> 里插入了一个 <code>dist</code> （分发），避免和其他组件命名冲突，同时特殊好记。\n本工具专注于前端代码块（js、css、html）预处理。</p>\n\n<h3>起因</h3>\n\n<p>一个页面从开发到上线基本会经历三个阶段：</p>\n\n<ul>\n<li>本机开发调试\n\n<ul>\n<li>打印一些变量和执行状态、模拟数据接口</li>\n</ul></li>\n<li>内网测试\n\n<ul>\n<li>跳过某些步骤、使用内网环境</li>\n</ul></li>\n<li>公网上线\n\n<ul>\n<li>移除调试代码、使用线上环境。</li>\n</ul></li>\n</ul>\n\n<p>其实前端代码和其他语言代码都需要编译，目前已经有很多成熟的工具来完成编译的事情。\n比如：fis、grunt、gulp，基本都是依赖配置文件，将项目代码进行编译到相应版本。</p>\n\n<h3>问题</h3>\n\n<ul>\n<li>代码和配置文件是分离的，这样开发维护起来不够直观。</li>\n<li>配置文件通常是基于 JSON，还是不够直观。</li>\n<li>调试代码容易遗忘，有导致线上事故的风险。</li>\n</ul>\n\n<h3>思考</h3>\n\n<p>那有没有一种方法能将部分编译逻辑写在代码中，就像 C 语言预编译宏定义，代码本身就包含了编译逻辑不依赖配置文件就能执行：</p>\n<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &quot;headfile&quot;</span>\n<span class="cp">#ifdef DEBUG</span>\n<span class="n">fprintf</span><span class="p">(</span><span class="s">&quot;variant=%d&quot;</span><span class="p">,</span> <span class="n">variant</span><span class="p">);</span>\n<span class="cp">#endif</span>\n</code></pre></div>\n<p>这样不仅利于维护也方便在本机开发时调试，那么接下来需求来了！</p>\n\n<h3>需求</h3>\n\n<ul>\n<li>学习成本要很低。（使用 html 标记，这个大家再熟悉不过）</li>\n<li>支持 html、css、js 文件格式。</li>\n<li>本机开发调试时不依赖编译器。（编译逻辑写在注释中）</li>\n<li>不仅能 include 一个文件，还能 include 一个文件中的片段（代码块）。</li>\n<li>能引入当前文件的代码块。</li>\n<li>能够替换代码块的内容。</li>\n<li>能 include 二进制文件，变为 base64 字符串，方便转成 dataUri。</li>\n<li>自动合并 css 或 js 文件，能够输出合并文件并能打 md5 戳。</li>\n<li>能够处理 <code>注释模板</code>，避免被压缩工具移除</li>\n</ul>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="nx">jhtmls</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>\n<span class="cm">/*!</span>\n<span class="cm">&lt;div title=&quot;#{title}&quot;&gt;#{content}&lt;/div&gt;</span>\n<span class="cm">*/</span><span class="p">});</span>\n</code></pre></div>\n<ul>\n<li>能够扩展替换规则。</li>\n</ul>\n\n<h2>设计思路</h2>\n\n<p>解决好如何定义代码块，其他问题基本就迎刃而解了。</p>\n\n<h3>用什么方式来定义代码块？</h3>\n\n<p>利用注释 + html 标记，并且又能和普通注释区分。</p>\n\n<ul>\n<li>在 html 中：</li>\n</ul>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!--debug--&gt;</span>\n<span class="nt">&lt;div&gt;</span>测试版本<span class="nt">&lt;/div&gt;</span>\n<span class="c">&lt;!--/debug--&gt;</span>\n</code></pre></div>\n<ul>\n<li>在 js 中：</li>\n</ul>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/*&lt;debug&gt;*/</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;测试版本&#39;</span><span class="p">);</span>\n<span class="cm">/*&lt;/debug&gt;*/</span>\n</code></pre></div>\n<ul>\n<li>在 css 中：</li>\n</ul>\n<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.version</span> <span class="p">{</span>\n  <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>\n<span class="c">/*&lt;debug&gt;*/</span>\n  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>\n<span class="c">/*&lt;/debug&gt;*/</span>\n<span class="p">}</span>\n</code></pre></div>\n<h3>一些代码未必默认启用，所以支持如下方式</h3>\n\n<ul>\n<li>在 html 中：</li>\n</ul>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!--release</span>\n<span class="c">&lt;div&gt;线上版本&lt;/div&gt;</span>\n<span class="c">/release--&gt;</span>\n</code></pre></div>\n<ul>\n<li>在 js 中：</li>\n</ul>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/*&lt;release</span>\n<span class="cm">console.log(&#39;测试版本&#39;);</span>\n<span class="cm">/release&gt;*/</span>\n</code></pre></div>\n<ul>\n<li>在 css 中：</li>\n</ul>\n<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.version</span> <span class="p">{</span>\n  <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>\n<span class="c">/*&lt;release</span>\n<span class="c">  color: red;</span>\n<span class="c">/release&gt;*/</span>\n<span class="p">}</span>\n</code></pre></div>\n<h3>废弃的方式</h3>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!--debug begin--&gt;</span>\n<span class="nt">&lt;div&gt;</span>测试版本<span class="nt">&lt;/div&gt;</span>\n<span class="c">&lt;!--debug end--&gt;</span>\n</code></pre></div>\n<ul>\n<li>使用 <code>being</code> / <code>end</code> 的方式，主要的问题是容易遗忘，该前缀还是后缀</li>\n</ul>\n\n<h2>基本概念</h2>\n\n<table><thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n<th>例子</th>\n<th>备注</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>file</td>\n<td>文件</td>\n<td>1.js,1.png</td>\n<td>包括二进制文件</td>\n</tr>\n<tr>\n<td>block</td>\n<td>代码块</td>\n<td></td>\n<td>只能是文本文件</td>\n</tr>\n<tr>\n<td>block::tag</td>\n<td>标签</td>\n<td><code>&lt;a&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>block::attribute</td>\n<td>代码块属性</td>\n<td><code>&lt;a encoding=&quot;md5&quot;&gt;</code></td>\n<td></td>\n</tr>\n</tbody></table>\n\n<h3>标准代码块</h3>\n\n<table><thead>\n<tr>\n<th>tag</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>include</td>\n<td>引入文件或代码块</td>\n<td><code>&lt;!--include file=&quot;all.js&quot; /--&gt;</code></td>\n</tr>\n<tr>\n<td>replace</td>\n<td>将当前代码块替换成文件或代码块</td>\n<td></td>\n</tr>\n<tr>\n<td>remove</td>\n<td>将当前代码移除</td>\n<td></td>\n</tr>\n</tbody></table>\n\n<h3>代码属性（attribute）</h3>\n\n<table><thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n<th>例子</th>\n<th>备注</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>encoding</td>\n<td>编码</td>\n<td>encoding=&quot;base64&quot;</td>\n<td>默认&quot;original&quot;，可扩展</td>\n</tr>\n<tr>\n<td>file</td>\n<td>文件名</td>\n<td>file=&quot;all.js&quot;</td>\n<td>默认当前文件</td>\n</tr>\n<tr>\n<td>type</td>\n<td>类型</td>\n<td>type=&quot;comment&quot;</td>\n<td>默认&quot;original&quot;，&quot;comment&quot;：去掉包裹代码块的注释</td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发器</td>\n<td>trigger=&quot;release,LAN&quot;</td>\n<td>默认&quot;release&quot;，存在这些触发器时才生效</td>\n</tr>\n<tr>\n<td>js</td>\n<td>js 文件</td>\n<td>js=&quot;dist/all.js?&quot;</td>\n<td>输出的 js 文件名</td>\n</tr>\n<tr>\n<td>css</td>\n<td>css 文件</td>\n<td>css=&quot;dist/all.css?&quot;</td>\n<td>输出的 css 文件名</td>\n</tr>\n</tbody></table>\n\n<h3>编码（encoding）</h3>\n\n<ul>\n<li>original：原文</li>\n<li>string：作为字符串</li>\n<li>base64：base64 输出</li>\n<li>md5：内容 MD5 戳（小写）</li>\n<li>concat：合并本地 js 或 css 并可以知道输出</li>\n</ul>\n\n<p>可以通过 <code>jdists.setEncoding(encoding, processor)</code> 扩展</p>\n\n<h3>使用限制</h3>\n\n<ul>\n<li>代码块不能交叉，可以嵌套</li>\n<li>代码块引用不能出现循环</li>\n</ul>\n\n<h2>实战</h2>\n\n<h3>开始使用</h3>\n\n<ul>\n<li><p>依赖 npm 环境</p></li>\n<li><p>安装 <code>$npm install jdists -g</code></p></li>\n<li><p>命令格式 <code>$jdists input1 [input2] [-output output] [-remove debug,test]</code></p></li>\n<li><p>命令参数</p></li>\n</ul>\n\n<table><thead>\n<tr>\n<th>参数</th>\n<th>简写</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>-output</td>\n<td>-o</td>\n<td>指定输出文件</td>\n<td>默认输出到控制台</td>\n</tr>\n<tr>\n<td>-remove</td>\n<td>-r</td>\n<td>指定移除的代码块</td>\n<td>默认 &quot;debug,test&quot;</td>\n</tr>\n<tr>\n<td>-trigger</td>\n<td>-t</td>\n<td>指定触发器</td>\n<td>默认 &quot;release&quot;</td>\n</tr>\n<tr>\n<td>-version</td>\n<td>-v</td>\n<td>打印当前版本</td>\n<td></td>\n</tr>\n</tbody></table>\n\n<h3>处理 js 中的 <code>注释模板</code></h3>\n\n<p>假设文件 <code>js/base.js</code> 内容为：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="nx">jhtmls</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="cm">/*!</span>\n<span class="cm">&lt;ul&gt;</span>\n<span class="cm">forEach(function(item) {</span>\n<span class="cm">  &lt;li&gt;#{item.title}&lt;/li&gt;</span>\n<span class="cm">});</span>\n<span class="cm">&lt;ul&gt;</span>\n<span class="cm">*/</span><span class="p">});</span>\n</code></pre></div>\n<p>如上可以省去拼接字符串的工作，直观好维护。但经过带压缩后就变成：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">render</span><span class="o">=</span><span class="nx">jhtmls</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="kd">function</span><span class="p">(){});</span>\n</code></pre></div>\n<p>怎么避免 <code>注释模板</code> 被替换？</p>\n\n<p><code>$jdists js/base.js -o dist/js/base.js</code></p>\n\n<p>生成的文件是：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="nx">jhtmls</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;&lt;ul&gt;\\nforEach(function(item) {\\n  &lt;li&gt;#{item.title}&lt;/li&gt;\\n});\\n&lt;ul&gt;&#39;</span><span class="p">);</span>\n</code></pre></div>\n<p>jdists 默认会处理 <code>注释模板</code></p>\n\n<h3>发布代码</h3>\n\n<p>假设文件 <code>js/net.js</code> 内容为：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="nx">ajax</span> <span class="o">||</span> <span class="p">{};</span>\n<span class="k">void</span> <span class="kd">function</span><span class="p">(</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>\n<span class="cm">/*&lt;replace</span>\n<span class="cm">  exports.host = &#39;http://api.baidu.com/1.0/getuser&#39;;</span>\n<span class="cm">/replace&gt;*/</span>\n<span class="p">}(</span><span class="nx">ajax</span><span class="p">);</span>\n</code></pre></div>\n<p><code>$jdists js/net.js -o dist/js/net.js</code></p>\n\n<p>生成的文件是：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="nx">ajax</span> <span class="o">||</span> <span class="p">{};</span>\n<span class="k">void</span> <span class="kd">function</span><span class="p">(</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">exports</span><span class="p">.</span><span class="nx">host</span> <span class="o">=</span> <span class="s1">&#39;http://api.baidu.com/1.0/getuser&#39;</span><span class="p">;</span>\n<span class="p">}(</span><span class="nx">ajax</span><span class="p">);</span>\n</code></pre></div>\n<p>还有一种情况，是我们需要先编译一个局域网版本</p>\n\n<p>假设文件 <code>js/net.js</code> 内容为：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="nx">ajax</span> <span class="o">||</span> <span class="p">{};</span>\n<span class="k">void</span> <span class="kd">function</span><span class="p">(</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>\n<span class="cm">/*&lt;replace trigger=&quot;release&quot;</span>\n<span class="cm">  exports.host = &#39;http://api.baidu.com/1.0/getuser&#39;;</span>\n<span class="cm">/replace&gt;*/</span>\n<span class="cm">/*&lt;replace trigger=&quot;LAN&quot;</span>\n<span class="cm">  exports.host = &#39;http://http://192.168.1.67:8000/1.0/getuser&#39;;</span>\n<span class="cm">/replace&gt;*/</span>\n<span class="p">}(</span><span class="nx">ajax</span><span class="p">);</span>\n</code></pre></div>\n<p><code>$jdists js/net.js -o dist/js/net.js -t LAN</code></p>\n\n<p>生成的文件是：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="nx">ajax</span> <span class="o">||</span> <span class="p">{};</span>\n<span class="k">void</span> <span class="kd">function</span><span class="p">(</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>\n<span class="cm">/*&lt;replace trigger=&quot;release&quot;</span>\n<span class="cm">  exports.host = &#39;http://api.baidu.com/1.0/getuser&#39;;</span>\n<span class="cm">/replace&gt;*/</span>\n  <span class="nx">exports</span><span class="p">.</span><span class="nx">host</span> <span class="o">=</span> <span class="s1">&#39;http://192.168.1.67:8000/1.0/getuser&#39;</span><span class="p">;</span>\n<span class="p">}(</span><span class="nx">ajax</span><span class="p">);</span>\n</code></pre></div>\n<p>指定 trigger 的代码块，会检查是否命中配置的触发器，如果没有命中则不启用功能。</p>\n\n<h3>合并静态资源</h3>\n\n<p>还是依<code>所见即所得</code>的设计思路，开发期的 html 指明了依赖的静态文件，如：</p>\n\n<p><code>index.html</code></p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>\n<span class="nt">&lt;head&gt;</span>\n  <span class="c">&lt;!--replace encoding=&quot;concat&quot; js=&quot;dist/all.js&quot; css=&quot;dist/all.css&quot;--&gt;</span>\n  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;base.css&quot;</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;button.css&quot;</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;base.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>\n  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;replace.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>\n  <span class="c">&lt;!--/replace--&gt;</span>\n<span class="nt">&lt;/head&gt;</span>\n<span class="nt">&lt;body&gt;</span>...<span class="nt">&lt;/body&gt;</span>\n<span class="nt">&lt;/html&gt;</span>\n</code></pre></div>\n<p><code>$jdists index.html -o dist/index.html</code></p>\n\n<p>生成的文件是：</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>\n<span class="nt">&lt;head&gt;</span>\n  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;dist/all.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>\n  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;dist/all.css&quot;</span><span class="nt">&gt;</span>\n<span class="nt">&lt;/head&gt;</span>\n<span class="nt">&lt;body&gt;</span>...<span class="nt">&lt;/body&gt;</span>\n<span class="nt">&lt;/html&gt;</span>\n</code></pre></div>\n<p>同时将本地静态资源分别合并到 <code>dist/all.js</code> 和 <code>dist/all.css</code></p>\n\n<h3>打包组件</h3>\n\n<p>通过 jdists 可以将零散的代码和静态资源，拼凑为一个完整的组件</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">void</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;jfpss-bar&#39;</span><span class="p">);</span>\n  <span class="k">if</span> <span class="p">(</span><span class="nx">bar</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="cm">/*&lt;include components/jframes/src/jframes.js&gt;*/</span>\n  <span class="p">;</span>\n  <span class="cm">/*&lt;include components/jhtmls/src/jhtmls.js&gt;*/</span>\n  <span class="p">;</span>\n  <span class="cm">/*&lt;include src/jfpss.js&gt;*/</span>\n\n  <span class="nx">createStyle</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="cm">/*!&lt;!--include src/tools.html style--&gt;*/</span><span class="p">});</span>\n\n  <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>\n  <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="cm">/*!&lt;!--include src/tools.html html--&gt;*/</span><span class="p">};</span>\n  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>\n\n  <span class="cm">/*&lt;include src/tools.html js&gt;*/</span>\n<span class="p">}();</span>\n</code></pre></div>\n<p>这样就可以用静态页面开发 UI 组件了。</p>\n\n<p>参考实例：<a href="https://github.com/zswang/jfpss/blob/master/src/tools.jdists">https://github.com/zswang/jfpss/blob/master/src/tools.jdists</a></p>\n\n<h2>后续</h2>\n\n<ul>\n<li>加入自动内联代码。</li>\n<li>提供 fis、grunt、gulp 插件。</li>\n</ul>\n\n<p>项目地址：<a href="https://github.com/zswang/jdists">https://github.com/zswang/jdists</a></p>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbedc,
       title: 'HTML head 头标签',
       link: 'http://fex.baidu.com/blog/2014/10/html-head-tags/',
       date: Sat Oct 04 2014 08:00:00 GMT+0800 (CST),
       description: '作者：paddingme <br> <p>HTML head 头部分的标签、元素有很多，涉及到浏览器对网页的渲染，SEO 等等，而各个浏览器内核以及各个国内浏览器厂商都有些自己的标签元素,这就造成了很多差异性。移动互联网时代，head 头部结构，移动端的 meta 元素，显得更为重要。了解每个标签的意义，写出满足自己需求的 head  头标签，是本文的目的。本篇以<a href="https://github.com/yisibl/blog/issues/1">一丝的文章</a>为基础，进行扩展总结介绍常用的 head 中各个标签、元素的意义以及使用场景。</p>\n\n<h3>DOCTYPE</h3>\n\n<p>DOCTYPE(Document Type)，该声明位于文档中最前面的位置，处于 <code>html</code> 标签之前，此标签告知浏览器文档使用哪种 HTML 或者 XHTML 规范。</p>\n\n<p>DTD(Document Type Definition) 声明以 <code>&lt;!DOCTYPE&gt;</code> 开始，不区分大小写，前面没有任何内容，如果有其他内容(空格除外)会使浏览器在 IE 下开启怪异模式(quirks mode)渲染网页。公共 DTD，名称格式为<code>注册//组织//类型 标签//语言</code>,<code>注册</code>指组织是否由国际标准化组织(ISO)注册，<code>+</code>表示是，<code>-</code>表示不是。<code>组织</code>即组织名称，如：W3C。<code>类型</code>一般是 DTD。<code>标签</code>是指定公开文本描述，即对所引用的公开文本的唯一描述性名称，后面可附带版本号。最后<code>语言</code>是 DTD 语言的 ISO 639 语言标识符，如：EN 表示英文，ZH 表示中文。XHTML 1.0 可声明三种 DTD 类型。分别表示严格版本，过渡版本，以及基于框架的 HTML 文档。</p>\n\n<ul>\n<li><p>HTML 4.01 strict</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;\n</code></pre></div></li>\n<li><p>HTML 4.01 Transitional</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n</code></pre></div></li>\n<li><p>HTML 4.01 Frameset</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;\n</code></pre></div></li>\n<li><p>最新 HTML5 推出更加简洁的书写，它向前向后兼容，推荐使用。</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!doctype html&gt;\n</code></pre></div></li>\n</ul>\n\n<p>在 HTML中 <code>doctype</code> 有两个主要目的。</p>\n\n<ul>\n<li>对文档进行有效性验证。</li>\n</ul>\n\n<p>它告诉用户代理和校验器这个文档是按照什么 DTD 写的。这个动作是被动的，每次页面加载时，浏览器并不会下载 DTD 并检查合法性，只有当手动校验页面时才启用。</p>\n\n<ul>\n<li><p>决定浏览器的呈现模式</p>\n\n<p>对于实际操作，通知浏览器读取文档时用哪种解析算法。如果没有写，则浏览器则根据自身的规则对代码进行解析，可能会严重影响 html 排版布局。浏览器有三种方式解析 HTML 文档。</p>\n\n<ul>\n<li>非怪异（标准）模式</li>\n<li>怪异模式</li>\n<li>部分怪异（近乎标准）模式\n关于IE浏览器的文档模式，浏览器模式，严格模式，怪异模式，DOCTYPE 标签，可详细阅读<a href="http://padding.me/blog/2014/07/04/mode-or-standard/">模式？标准！</a>的内容。</li>\n</ul></li>\n</ul>\n\n<h3>charset</h3>\n\n<p>声明文档使用的字符编码，</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>html5 之前网页中会这样写：</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>这两个是等效的，具体可移步阅读：<a href="http://stackoverflow.com/questions/4696499/meta-charset-utf-8-vs-meta-http-equiv-content-type"><code>&lt;meta charset=&#39;utf-8&#39;&gt;</code> vs <code>&lt;meta http-equiv=&#39;Content-Type&#39;&gt;</code></a>，所以建议使用较短的，易于记忆。</p>\n\n<h3>lang属性</h3>\n\n<p>简体中文</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;zh-cmn-Hans&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>繁体中文</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;zh-cmn-Hant&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>为什么 <code>lang=&quot;zh-cmn-Hans&quot;</code> 而不是我们通常写的 <code>lang=&quot;zh-CN&quot;</code> 呢，请移步阅读: <a href="http://zhi.hu/XyIa">页头部的声明应该是用 lang=&quot;zh&quot; 还是 lang=&quot;zh-cn&quot;</a>。</p>\n\n<h3>优先使用 IE 最新版本和 Chrome</h3>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge,chrome=1&quot;</span> <span class="nt">/&gt;</span>\n</code></pre></div>\n<h3>360 使用Google Chrome Frame</h3>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;renderer&quot;</span> <span class="na">content=</span><span class="s">&quot;webkit&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>360 浏览器就会在读取到这个标签后，立即切换对应的极速核。\n另外为了保险起见再加入</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=Edge,chrome=1&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>这样写可以达到的效果是如果安装了 Google Chrome Frame，则使用 GCF 来渲染页面，如果没有安装 GCF，则使用最高版本的 IE 内核进行渲染。</p>\n\n<p>相关链接：<a href="http://se.360.cn/v6/help/meta.html">浏览器内核控制 Meta 标签说明文档</a></p>\n\n<h3>百度禁止转码</h3>\n\n<p>通过百度手机打开网页时，百度可能会对你的网页进行转码，脱下你的衣服，往你的身上贴狗皮膏药的广告，为此可在 head 内添加</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Cache-Control&quot;</span> <span class="na">content=</span><span class="s">&quot;no-siteapp&quot;</span> <span class="nt">/&gt;</span>\n</code></pre></div>\n<p>相关链接：<a href="http://m.baidu.com/pub/help.php?pn=22&amp;ssid=0&amp;from=844b&amp;bd_page_type=1">SiteApp 转码声明</a></p>\n\n<h3>SEO 优化部分</h3>\n\n<ul>\n<li><p>页面标题<code>&lt;title&gt;</code>标签(head 头部必须)</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;title&gt;your title&lt;/title&gt;\n</code></pre></div></li>\n<li><p>页面关键词 keywords</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;keywords&quot; content=&quot;your keywords&quot;&gt;\n</code></pre></div></li>\n<li><p>页面描述内容 description</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;description&quot; content=&quot;your description&quot;&gt;\n</code></pre></div></li>\n<li><p>定义网页作者 author</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;author&quot; content=&quot;author,email address&quot;&gt;\n</code></pre></div></li>\n<li><p>定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt;\n</code></pre></div></li>\n</ul>\n\n<p>相关链接：<a href="http://msdn.microsoft.com/zh-cn/library/ff724037(v=expression.40).aspx">WEB1038 - <meta name="robots"> 标记包含无效的值</a></p>\n\n<h3>viewport</h3>\n\n<p><code>viewport</code> 可以让布局在移动浏览器上显示的更好。\n通常会写</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p><code>width=device-width</code> 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边(<a href="http://bigc.at/ios-webapp-viewport-meta.orz">http://bigc.at/ios-webapp-viewport-meta.orz</a>)</p>\n\n<p>content 参数：</p>\n\n<ul>\n<li>width viewport 宽度(数值/device-width)</li>\n<li>height viewport 高度(数值/device-height)</li>\n<li>initial-scale 初始缩放比例</li>\n<li>maximum-scale 最大缩放比例</li>\n<li>minimum-scale 最小缩放比例</li>\n<li>user-scalable 是否允许用户缩放(yes/no)</li>\n<li><p>minimal-ui iOS 7.1 beta 2 中新增属性，可以在页面加载时最小化上下状态栏。这是一个布尔值，可以直接这样写：</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimal-ui&quot;&gt;\n</code></pre></div></li>\n</ul>\n\n<p>而如果你的网站不是响应式的，请不要使用 initial-scale 或者禁用缩放。</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width,user-scalable=yes&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>相关链接：<a href="http://www.qianduan.net/non-responsive-design-viewport.html">非响应式设计的viewport</a></p>\n\n<p>适配 iPhone 6 和 iPhone 6plus 则需要写：</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=375&quot;</span><span class="nt">&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=414&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<p>大部分 4.7~5 寸的安卓设备的 viewport 宽设为 360px，iPhone 6 上却是 375px，大部分 5.5 寸安卓机器（比如说三星 Note）的 viewport 宽为 400，iPhone 6 plus 上是 414px。</p>\n\n<h3>ios 设备</h3>\n\n<p>添加到主屏后的标题（iOS 6 新增）</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-title&quot;</span> <span class="na">content=</span><span class="s">&quot;标题&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span>\n</code></pre></div>\n<p>是否启用 WebApp 全屏模式</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-capable&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 是否启用 WebApp 全屏模式 --&gt;</span>\n</code></pre></div>\n<p>设置状态栏的背景颜色</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="na">content=</span><span class="s">&quot;black-translucent&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 设置状态栏的背景颜色，只有在 `&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;` 时生效 --&gt;</span>\n</code></pre></div>\n<p>只有在 &quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; 时生效</p>\n\n<p>content 参数：</p>\n\n<ul>\n<li>default 默认值。</li>\n<li>black 状态栏背景是黑色。</li>\n<li>black-translucent 状态栏背景是黑色半透明。\n如果设置为 default 或 black ,网页内容从状态栏底部开始。\n如果设置为 black-translucent ,网页内容充满整个屏幕，顶部会被状态栏遮挡。</li>\n</ul>\n\n<p>禁止数字识自动别为电话号码</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;format-detection&quot;</span> <span class="na">content=</span><span class="s">&quot;telephone=no&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 禁止数字识自动别为电话号码 --&gt;</span>\n</code></pre></div>\n<h3>iOS 图标</h3>\n\n<p>rel 参数：\napple-touch-icon 图片自动处理成圆角和高光等效果。\napple-touch-icon-precomposed 禁止系统自动添加效果，直接显示设计原图。\niPhone 和 iTouch，默认 57x57 像素，必须有</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">href=</span><span class="s">&quot;/apple-touch-icon-57x57-precomposed.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span>\n</code></pre></div>\n<p>iPad，72x72 像素，可以没有，但推荐有</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;72x72&quot;</span> <span class="na">href=</span><span class="s">&quot;/apple-touch-icon-72x72-precomposed.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPad，72x72 像素，可以没有，但推荐有 --&gt;</span>\n</code></pre></div>\n<p>Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;114x114&quot;</span> <span class="na">href=</span><span class="s">&quot;/apple-touch-icon-114x114-precomposed.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span>\n</code></pre></div>\n<p>Retina iPad，144x144 像素，可以没有，但推荐有</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;144x144&quot;</span> <span class="na">href=</span><span class="s">&quot;/apple-touch-icon-144x144-precomposed.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span>\n</code></pre></div>\n<p>IOS 图标大小在iPhone 6 plus上是180×180，iPhone 6 是120x120。\n适配iPhone 6 plus，则需要在<head>中加上这段</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;180x180&quot;</span> <span class="na">href=</span><span class="s">&quot;retinahd_icon.png&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<h3>iOS 启动画面</h3>\n\n<p>官方文档：<a href="https://developer.apple.com/library/ios/qa/qa1686/_index.html">https://developer.apple.com/library/ios/qa/qa1686/_index.html</a>\n参考文章：<a href="http://wxd.ctrip.com/blog/2013/09/ios7-hig-24/">http://wxd.ctrip.com/blog/2013/09/ios7-hig-24/</a></p>\n\n<p>iPad 的启动画面是不包括状态栏区域的。</p>\n\n<p>iPad 竖屏 768 x 1004（标准分辨率）</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">sizes=</span><span class="s">&quot;768x1004&quot;</span> <span class="na">href=</span><span class="s">&quot;/splash-screen-768x1004.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span>\n</code></pre></div>\n<p>iPad 竖屏 1536x2008（Retina）</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">sizes=</span><span class="s">&quot;1536x2008&quot;</span> <span class="na">href=</span><span class="s">&quot;/splash-screen-1536x2008.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span>\n</code></pre></div>\n<p>iPad 横屏 1024x748（标准分辨率）</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">sizes=</span><span class="s">&quot;1024x748&quot;</span> <span class="na">href=</span><span class="s">&quot;/Default-Portrait-1024x748.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span>\n</code></pre></div>\n<p>iPad 横屏 2048x1496（Retina）</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">sizes=</span><span class="s">&quot;2048x1496&quot;</span> <span class="na">href=</span><span class="s">&quot;/splash-screen-2048x1496.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span>\n</code></pre></div>\n<p>iPhone 和 iPod touch 的启动画面是包含状态栏区域的。</p>\n\n<p>iPhone/iPod Touch 竖屏 320x480 (标准分辨率)</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">href=</span><span class="s">&quot;/splash-screen-320x480.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span>\n</code></pre></div>\n<p>iPhone/iPod Touch 竖屏 640x960 (Retina)</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">sizes=</span><span class="s">&quot;640x960&quot;</span> <span class="na">href=</span><span class="s">&quot;/splash-screen-640x960.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span>\n</code></pre></div>\n<p>iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina)</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">sizes=</span><span class="s">&quot;640x1136&quot;</span> <span class="na">href=</span><span class="s">&quot;/splash-screen-640x1136.png&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span>\n</code></pre></div>\n<p>添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-itunes-app&quot;</span> <span class="na">content=</span><span class="s">&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span>\n</code></pre></div>\n<p>iPhone 6对应的图片大小是750×1294，iPhone 6 Plus 对应的是1242×2148 。</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">href=</span><span class="s">&quot;launch6.png&quot;</span> <span class="na">media=</span><span class="s">&quot;(device-width: 375px)&quot;</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-startup-image&quot;</span> <span class="na">href=</span><span class="s">&quot;launch6plus.png&quot;</span> <span class="na">media=</span><span class="s">&quot;(device-width: 414px)&quot;</span><span class="nt">&gt;</span>\n</code></pre></div>\n<h3>Windows 8</h3>\n\n<p>Windows 8 磁贴颜色</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-TileColor&quot;</span> <span class="na">content=</span><span class="s">&quot;#000&quot;</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- Windows 8 磁贴颜色 --&gt;</span>\n</code></pre></div>\n<p>Windows 8 磁贴图标</p>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-TileImage&quot;</span> <span class="na">content=</span><span class="s">&quot;icon.png&quot;</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- Windows 8 磁贴图标 --&gt;</span>\n</code></pre></div>\n<h3>rss订阅</h3>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;alternate&quot;</span> <span class="na">type=</span><span class="s">&quot;application/rss+xml&quot;</span> <span class="na">title=</span><span class="s">&quot;RSS&quot;</span> <span class="na">href=</span><span class="s">&quot;/rss.xml&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 添加 RSS 订阅 --&gt;</span>\n</code></pre></div>\n<h3>favicon icon</h3>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">type=</span><span class="s">&quot;image/ico&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon.ico&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 添加 favicon icon --&gt;</span>\n</code></pre></div>\n<p>比较详细的 favicon 介绍可参考<a href="https://github.com/audreyr/favicon-cheat-sheet">https://github.com/audreyr/favicon-cheat-sheet</a></p>\n\n<h3>移动端的meta</h3>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1, user-scalable=no&quot;</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-capable&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="na">content=</span><span class="s">&quot;black&quot;</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;format-detection&quot;</span><span class="na">content=</span><span class="s">&quot;telephone=no, email=no&quot;</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1, user-scalable=no&quot;</span> <span class="nt">/&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-capable&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span><span class="c">&lt;!-- 删除苹果默认的工具栏和菜单栏 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="na">content=</span><span class="s">&quot;black&quot;</span> <span class="nt">/&gt;</span><span class="c">&lt;!-- 设置苹果工具栏颜色 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;format-detection&quot;</span> <span class="na">content=</span><span class="s">&quot;telphone=no, email=no&quot;</span> <span class="nt">/&gt;</span><span class="c">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span>\n<span class="c">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;renderer&quot;</span> <span class="na">content=</span><span class="s">&quot;webkit&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- 避免IE使用兼容模式 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;HandheldFriendly&quot;</span> <span class="na">content=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- 微软的老式浏览器 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;MobileOptimized&quot;</span> <span class="na">content=</span><span class="s">&quot;320&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- uc强制竖屏 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;screen-orientation&quot;</span> <span class="na">content=</span><span class="s">&quot;portrait&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- QQ强制竖屏 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;x5-orientation&quot;</span> <span class="na">content=</span><span class="s">&quot;portrait&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- UC强制全屏 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;full-screen&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- QQ强制全屏 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;x5-fullscreen&quot;</span> <span class="na">content=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- UC应用模式 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;browsermode&quot;</span> <span class="na">content=</span><span class="s">&quot;application&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- QQ应用模式 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;x5-page-mode&quot;</span> <span class="na">content=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- windows phone 点击无高光 --&gt;</span>\n<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-tap-highlight&quot;</span> <span class="na">content=</span><span class="s">&quot;no&quot;</span><span class="nt">&gt;</span>\n<span class="c">&lt;!-- 适应移动端end --&gt;</span>\n</code></pre></div>\n<p>这是来自 <a href="http://weibo.com/toooobug">toobug</a> 的分享总结。</p>\n\n<p>更多的 meta 标签参考</p>\n\n<ul>\n<li><a href="http://code.lancepollard.com/complete-list-of-html-meta-tags/">COMPLETE LIST OF HTML META TAGS</a></li>\n<li><a href="http://www.iacquire.com/blog/18-meta-tags-every-webpage-should-have-in-2013">18 Meta Tags Every Webpage Should Have in 2013</a></li>\n</ul>\n\n<p>参考文章：</p>\n\n<ul>\n<li><a href="https://github.com/yisibl/blog/issues/1">常用的 HTML 头部标签</a></li>\n<li><a href="https://gist.github.com/paddingme/6182708733917ae36331">html5_header</a></li>\n<li><a href="http://amazeui.org/css/">amazeui css</a></li>\n<li><a href="http://www.douban.com/note/170560091/">DOCTYPE</a></li>\n<li><a href="http://www.uisdc.com/ios8-ten-new-feature">WEB 工程师和设计师必学的 10 个 IOS 8 新鲜改变</a></li>\n</ul>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbedd,
       title: 'HTTP 2 中文版首发 By FEX',
       link: 'http://fex.baidu.com/blog/2014/09/http-2.0/',
       date: Wed Sep 17 2014 08:00:00 GMT+0800 (CST),
       description: '作者：rank <br> <p>HTTP 全称为 HyperText Transfer Protocol，中文叫做超文本传输协议。用于 Web 应用层传输，是 Web 架构的核心，它至今公布有 3 个版本：</p>\n\n<ul>\n<li>HTTP 0.9，只有基本的文本 GET 功能。</li>\n<li>HTTP 1.0，完善的请求/响应模型，并将协议补充完整。</li>\n<li>HTTP 1.1，在 1.0 基础上进行更新，增加了如 长久连接 keep-alive 与 chunked 等功能。</li>\n</ul>\n\n<p>距最近 1999 年 6 月 <a href="https://www.ietf.org/rfc/rfc2616.txt">HTTP 1.1 RFC 2616</a> 发布以来至今已有 15 年。</p>\n\n<p>而 HTTP 2 首个 draft 已于 2012 年 11 月发布，预计到明年初正式发布。它保证了与 HTTP 1.1 的完全语义兼容，最初考虑的是 Google SPDY 协议、微软的 SM 协议和 Network-Friendly HTTP 更新。最终各方推荐了 SPDY 协议，并在此基础上进行了相应更新。</p>\n\n<p>HTTP 2 相比 1.1 的更新大部分集中于：</p>\n\n<ul>\n<li>多路复用</li>\n<li>HEAD 压缩</li>\n<li>服务器推送</li>\n<li>优先级请求</li>\n</ul>\n\n<p>作为与时俱进的我们，有必要去了解和学习 HTTP 2，它对我们未来 Web 性能优化工作起到很重要的作用，是一切优化的基础。现 Chrome 里也已使用 SPDY。</p>\n\n<p>今天我们很高兴和大家分享一则信息，由 FEX 的 zhangtao 等同学们，业余花费近半年时间翻译的 HTTP 2 草案发布。  </p>\n\n<ul>\n<li>在「<a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99">百度阅读</a>」上架至免费区，可多端同步阅读。</li>\n<li>中英对照版在 FEX-team 的 <a href="https://github.com/fex-team/http2-spec/blob/master/HTTP2%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E7%89%88(06-29).md">Github</a> 中。</li>\n</ul>\n\n<p>欢迎在阅读过程中如发现问题，请给予我们指正与反馈。</p>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbede,
       title: 'SSLStrip 的未来 —— HTTPS 前端劫持',
       link: 'http://fex.baidu.com/blog/2014/08/ssl-frontend-hijack/',
       date: Wed Aug 20 2014 08:00:00 GMT+0800 (CST),
       description: '作者：zjcqoo <br> <h2>前言</h2>\n\n<p>在之前介绍的流量劫持文章里，曾提到一种『HTTPS 向下降级』的方案 —— 将页面中的 HTTPS 超链接全都替换成 HTTP 版本，让用户始终以明文的形式进行通信。</p>\n\n<p>看到这，也许大家都会想到一个经典的中间人攻击工具 —— SSLStrip，通过它确实能实现这个效果。</p>\n\n<p>不过今天讲解的，则是完全不同的思路，一种更有效、更先进的解决方案 —— HTTPS 前端劫持。</p>\n\n<hr>\n\n<h2>后端的缺陷</h2>\n\n<p>在过去，流量劫持基本通过后端来实现，SSLStrip 就是个典型的例子。</p>\n\n<p>类似其他中间人工具，纯后端的实现只能操控最原始的流量数据，这严重阻碍了向更高层次的发展，面临众多难以解决的问题。</p>\n\n<ul>\n<li><p>动态元素怎么办？</p></li>\n<li><p>如何处理数据包分片？</p></li>\n<li><p>性能消耗能否降低？</p></li>\n<li><p>......</p></li>\n</ul>\n\n<h3>动态元素</h3>\n\n<p>在 Web 刚出现的年代里，SSLStrip 这样的工具还是大有用武之地的。那时的网页都以静态为主，结构简单层次清晰。在流量上进行替换，完全能够胜任。</p>\n\n<p>然而，如今的网页日益复杂，脚本所占比重越来越多。如果仅仅从流量上着手，显然力不从心。</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">protocol</span> <span class="o">=</span> <span class="s1">&#39;https&#39;</span><span class="p">;</span>\n<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;a href=&quot;&#39;</span> <span class="o">+</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;://www.alipay.com/&quot;&gt;Login&lt;/a&gt;&#39;</span><span class="p">);</span>\n</code></pre></div>\n<p>即使非常简单的动态元素，后端也毫无招架之力。</p>\n\n<h3>分片处理</h3>\n\n<p>分块传输的道理大家都明白。对于较大的数据，一口气是无法传完的。客户端依次收到各个数据块，最终才能合并成一个完整的网页。</p>\n\n<p><img src="/img/ssl-frontend-hijack/data_chunk.png" alt=""></p>\n\n<p>由于每次收到的都是残缺的碎片，这给链接替换带来很大的麻烦。加上不少页面并非标准的 UTF-8 编码，因此更是难上加难。</p>\n\n<p>为了能顺利进行，中间人通常先收集数据，等到页面接收完整，才开始替换。</p>\n\n<p><img src="/img/ssl-frontend-hijack/wait_full_data.png" alt=""></p>\n\n<p>如果把数据比作水流，这个代理就像大坝一样，拦截了源源不断往下流的水，直到蓄满了才开始释放。因此，下游的人们需忍受很久的干旱，才能等到水源。</p>\n\n<h3>性能消耗</h3>\n\n<p>由于 HTML 兼容众多历史遗留规范，因此替换工作并非是件轻松事。</p>\n\n<p>各种复杂的正则表达式，消耗着不少的 CPU 资源。尽管用户最终点击的只是其中一两个链接，但中间人并不知道将会是哪个，因此仍需分析整个页面。这不得不说是个悲哀。</p>\n\n<hr>\n\n<h2>前端的优势</h2>\n\n<p>如果我们的中间人能打入到页面的前端，那么情况会不会有所改善呢？</p>\n\n<h3>分片处理</h3>\n\n<p>首先，要派一名间谍到页面里。这是非常容易办到的：</p>\n\n<p><img src="/img/ssl-frontend-hijack/inject_xss.png" alt=""></p>\n\n<p>不像超链接遍布在页面各处，脚本插入到头部即可运行了。所以我们根本不用整个页面的数据，只需改造下第一个 chunk 就可以，后续的数据仍然交给系统转发。</p>\n\n<p>因此，整个代理的时间几乎不变！</p>\n\n<h3>动态元素</h3>\n\n<p>很好，我们轻易渗透到页面里。但接着又如何发起进攻？</p>\n\n<p>既然到了前端里，方法就相当多了。最简单的，就是遍历超链接元素，将 https 的都替换成 http 版本。</p>\n\n<p>这个想法确实不错，但仍停留在 SSLStrip 思维模式上。还是『替换』这条路，只是从后端搬到前端而已。</p>\n\n<p>尽管这个方法能胜任大多场合，但仍然不是最完美的。我们并不知道动态元素何时会添加进来，因此需要开启定时器不断的扫描。这显然是个很挫的办法。</p>\n\n<h3>性能优化</h3>\n\n<p>事实上，超链接无论是谁产生的、何时添加进来的，<strong>只要不点击，都是不起作用的</strong>。所以，我们只需关心何时去点击就可以 —— 如果我们的程序，能在点击产生的第一时间里控制住现场，那么之后的流程就可由我们决定了。</p>\n\n<p>听起来似乎很玄乎，不过在前端，这只是小菜一碟的事。点击，不过个事件而已。既然是事件，我们用最基础的事件捕获机制，即可将其轻松拿下：</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// ...</span>\n<span class="p">},</span> <span class="kc">true</span><span class="p">);</span>\n</code></pre></div>\n<p>DOM-3-Event 是个非常有意义的事件模型。之前用它来实现『<a href="http://fex.baidu.com/blog/2014/06/xss-frontend-firewall-1/">内联 XSS 拦截</a>』，如今同样也可以用来劫持链接。</p>\n\n<p>我们捕获全局的点击事件，如果发现有落在 https 超链接上，果断将其......拦截？</p>\n\n<p>如果真把它拦截了，那新页面就不会出现了。当然你会说，可以自己 window.open 弹一个，反正点击事件里是可以弹窗的。</p>\n\n<p>不过，请别忘了，并非所有的超链接都是弹窗，也有不少是直接跳转的。你也会说可以修改 location 来实现。</p>\n\n<p>但要识别是『弹窗』还是『跳转』，并不简单。除了超链接的 <code>target</code> 属性，页面里的 <code>&lt;base&gt;</code> 元素也会有影响。当然，这些相信你都能处理好。</p>\n\n<p>然而，现实未必都是那么简单的。有些超链接本身就绑定了 onclick 事件，甚至在其中 return false 或 preventDefault，屏蔽了默认行为。如果我们不顾及这些，仍然模拟跳转或弹窗，那就违背页面的意愿了。</p>\n\n<p>事实上，有一个非常简单的办法：当我们的捕获程序运行时，新页面还远没出现，这时仍有机会修改超链接的 href。待事件冒泡完成、执行默认行为时，浏览器才读取 href 属性，作为最终的结果。</p>\n\n<p>因此，我们只需捕获点击事件，修改超链接地址就可以了。至于是跳转、弹窗、还是被屏蔽，根本不用我们关心。</p>\n\n<p><img src="/img/ssl-frontend-hijack/https_link_hook.png" alt=""></p>\n\n<p>就那么简单。因为我们是在用户点下去之后才修改，所以浏览器状态栏里，显示的仍是原先 https ！</p>\n\n<p>当然，点过一次之后，再把鼠标放到超链接上，状态栏里显示的就是修改后的了。</p>\n\n<p>为了能继续忽悠，我们在修改 href 之后的下个线程周期里，把它改回来。因为有了一定延时，新页面并不受影响。</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">link</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>                                <span class="c1">// 保存原始地址</span>\n<span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;https://&#39;</span><span class="p">,</span> <span class="s1">&#39;http://&#39;</span><span class="p">);</span>     <span class="c1">// 暂时换成 http 的</span>\n<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>                                <span class="c1">// 新页面打开后，还原回来</span>\n<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>\n</code></pre></div>\n<p>这样，页面里的超链接始终都是正常的 —— 只有用户点下的瞬间，才临时伪装一下。</p>\n\n<hr>\n\n<h2>更多拦截</h2>\n\n<p>除了通过超链接，还有其他方式访问页面，我们应尽可能多的进行监控。例如：</p>\n\n<ul>\n<li>表单提交</li>\n<li>window.open 弹窗</li>\n<li>框架页面</li>\n<li>.....</li>\n</ul>\n\n<h3>表单提交</h3>\n\n<p>表单提交和超链接非常类似，都具有事件，只是将 <code>click</code> 换成 <code>submit</code>，<code>href</code> 换成 <code>action</code> 而已。</p>\n\n<h3>脚本弹窗</h3>\n\n<p>函数调用的最简单了，只需一个小钩子即可搞定：</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">raw_open</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">;</span>\n<span class="nb">window</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// FIX: null, case insensitive</span>\n    <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;https://&#39;</span><span class="p">,</span> <span class="s1">&#39;http://&#39;</span><span class="p">);</span>\n    <span class="nx">raw_open</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n<h3>框架页面</h3>\n\n<p>因为我们把主页面降级成 http 了，但里面的框架地址仍是原先的。由于协议不同，这会产生跨域问题，导致页面无法正常工作。</p>\n\n<p>所以我们还要把页面里的框架，也都转型成 http 版本，确保能和主页面融为一致。</p>\n\n<p>但框架和之前的那些不同，因为它是自动加载的，而且也没有一个即将加载的事件。如果等到框架加载完了再去处理，说不定已经开始报跨域错误了。而且还会白白的浪费一次加载流量。</p>\n\n<p>因此，我们必须让框架一出现，就立即替换掉地址。</p>\n\n<p>这在过去是个很棘手的问题，然而 HTML5 时代给我们带来了新希望 —— <code>MutationEvent</code>。用它即可实时监控页面元素，之前也<a href="http://fex.baidu.com/blog/2014/06/xss-frontend-firewall-2/">尝试过一些试验</a>。</p>\n\n<p>当然，即使 MutationEvent，偶尔也会有延时遗漏。为了能彻底避免出现 https 框架页，我们继续使用 HTML5 带来的一项新技术 —— <a href="http://www.w3.org/TR/CSP/">Content Security Policy</a>，由于它是浏览器原生支持的，因此实施的非常彻底。</p>\n\n<p>在我们的代理返回头中，加上如下 HTTP 头部，即可完美拦截 https 框架页了：</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">Content-Security-Policy: default-src * data &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; frame-src http://*\n</code></pre></div>\n<p>解决了框架页的问题，我们就能成功劫持支付宝登录页的账号框 IFrame 了！</p>\n\n<p><img src="/img/ssl-frontend-hijack/alipay_login_hijack.jpg" alt=""></p>\n\n<hr>\n\n<h2>后端配合</h2>\n\n<p>通过前端的 XSS 脚本，我们轻易解决了过去各种棘手的问题。但挑战并未就此结束，我们仍面临着众多难题。</p>\n\n<h3>如何告诉代理</h3>\n\n<p>尽管在前端上面，我们已经避开了各种进入 https 的途径，让请求以明文的形式交给代理。但代理又如何决定，这个请求用 https 还是 http 转发呢？</p>\n\n<p>传统的后端劫持之所以能正确转发，那是在替换超链接的时候，已经做下记录。当出现记录中的请求，就走 https 的转发。</p>\n\n<p>而我们的劫持在前端，并且只发生在点击的一瞬间。即使马上去告诉中间人，某个 URL 是 https 的，这时也来不及了。</p>\n\n<p>告诉中间人是必须的。但我们可以用一个巧妙的方法，不必单独发送消息 —— 我们只需在转型后的 URL 里，做个小记号就可以了。</p>\n\n<p>当代理发现请求的 URL 里有这个记号，它自然就懂了，直接走 https！</p>\n\n<p><img src="/img/ssl-frontend-hijack/downgrade_url_symbol.png" alt=""></p>\n\n<p>由于把页面从 https 降级到了 http，因此相关请求的<code>referer</code>也变成 http 版了。所以，中间人应尽量把 referer 也修正回来，避免被服务器察觉。</p>\n\n<h3>隐藏伪装</h3>\n\n<p>不过，在 URL 里加标记的方法，也有很大的缺陷。</p>\n\n<p>因为页面的 URL 会在地址栏里显示出来，所以用户会看见我们的记号。当然，我们可以使用一些迷惑性的字符，例如 <code>?zh_cn</code>、<code>?utf_8</code>，<code>?from_baidu</code> 等等，更好的欺骗用户。</p>\n\n<p>当然，如果你觉得还是不满意，也有办法让这些碍眼标记尽快消失：</p>\n<div class="highlight"><pre><code class="language-text" data-lang="text">if url has symbol\n    history.replaceState(..., clear_symbol(url) )\n</code></pre></div>\n<p>HTML5 为我们提供了修改地址栏的能力，并且无需刷新。这些强悍的功能，如今都可以在前端利用起来了。</p>\n\n<h3>重定向劫持</h3>\n\n<p>当然，光靠前端的劫持，还是远远不够的。现实中，还有另一种很常见的方式，那就是重定向到安全页面。</p>\n\n<p>仔细回想下，平时我们是怎样进入想上的网站的。例如支付宝，除非你有收藏，否则就得自己敲入 <a href="http://www.alipay.com">www.alipay.com</a> 或 <a href="http://www.zhifubao.com">www.zhifubao.com</a> ，当你回车进入时，浏览器又如何知道这是一个 HTTPS 的网站呢？</p>\n\n<p>显然，第一个请求仍是普通的 HTTP 协议。当然，这个 HTTP 版的支付宝的确存在，它的唯一功能就将用户重定向到 HTTPS 版本。</p>\n\n<p>当我们的中间人一旦发现有重定向到 HTTPS 网站的，当然不希望用户走这条不受自己控制的路。于是拦下这个重定向，然后以 HTTPS 的方式，获取重定向后的内容，最后再以 HTTP 明文的方式，回复给用户。</p>\n\n<p><img src="/img/ssl-frontend-hijack/https_redir_hijack.png" alt=""></p>\n\n<p>因此在用户看来，始终处于 HTTP 网站上。</p>\n\n<p>不过，如今的 Web 里增加一个新的安全标准：<a href="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security">HTTP Strict Transport Security</a>。如果客户端收到这个头部，之后一段时间内访问该站点，就始终通过 HTTPS 的方式。</p>\n\n<p>所以我们的中间人一旦发现有这个字段，就得果断将其删除。</p>\n\n<p>当然，用户直接敲网址的并不常见。大多都是搜索引擎，然后直接从第一个结果里进来了。</p>\n\n<p>比较悲剧的是，国内的搜索引擎几乎都是 HTTP 的。在用户访问搜索页面的时候，我们的 XSS 早已潜伏在其中了，因此从中点出来的任何一条结果，都是进不到官方的 HTTPS 里的：）</p>\n\n<p>除了搜索页面，不少类似 hao123 之类的网址大全，大多也未开启 HTTPS。因此从中导流的网站，都面临着被中间人劫持的风险。</p>\n\n<hr>\n\n<h2>防范措施</h2>\n\n<p>介绍了攻击方法，接着讲解防御措施。</p>\n\n<h3>脚本跳转</h3>\n\n<p>事实上，无论是前端劫持还是后端过滤，仍有不少的网站无法成功。例如京东的登录：</p>\n\n<p><img src="/img/ssl-frontend-hijack/jd_login.png" alt=""></p>\n\n<p>它是通过脚本跳转到 HTTPS 地址的。而浏览器的 <code>location</code> 是个及其特殊的属性，它<a href="http://stackoverflow.com/questions/22290948/stopping-script-from-changing-document-location-href">可以被屏蔽</a>，但无法被重写。因此我们难以控制页面的跳转情况。</p>\n\n<p>如果非要劫持京东页面，我们只能使用白名单的方式，特殊对待该站点。但这样就大幅增加了攻击成本。</p>\n\n<h3>混淆明文</h3>\n\n<p>当然，不难发现京东的登录脚本里，URL 是以最直白的明文出现的。所以我们利用 SSLStrip 的方式，对脚本里的 <code>https://</code> 的文本进行替换，也能起到一定的作用，毕竟大多脚本都对此毫无防备。</p>\n\n<p>但对于稍微复杂一点的脚本，例如通过字符串拼接而成的 URL，那么就难以实施了。</p>\n\n<p>所以在安全需要较高的场合，不妨把一些重要的地址进行简单的处理，中间人就无法使用通用的方式来攻击。而必须针对站点进行特殊对待，从而提高攻击成本。</p>\n\n<h3>尽可能多的 HSTS</h3>\n\n<p>之前提到 <code>HSTS</code> 头。只要这个字段出现过一次，浏览器在很长时间里都会只用 HTTPS 访问站点。因此，我们尽可能多的开启 HSTS。</p>\n\n<p>现实中的劫持并非都是 100% 成功的，上述提到，使用脚本跳转很容易出现遗漏。所以，只要逮住用户一次遗漏，HSTS 就可以让之后的页面降级彻底失效了。</p>\n\n<hr>\n\n<h2>攻击演示</h2>\n\n<p>因为是前端劫持，所以 Demo 有两个文件：一个前端代码，另一个后端脚本（NodeJS）。</p>\n\n<p>相关源码：<a href="https://github.com/EtherDream/https_hijack_demo">https://github.com/EtherDream/https<em>hijack</em>demo</a></p>\n\n<p>相比之前写的流量劫持演示，这里功能更为专一，不再提供额外的劫持途径（例如 DNS 等）。</p>\n\n<p>想测试其实非常简单，只需配置浏览器代理，即可模拟 HTTP 的劫持：</p>\n\n<p><img src="/img/ssl-frontend-hijack/hijack_test.png" alt=""></p>\n\n<p>不嫌麻烦的话，也可以在 Linux 内核的系统上测试，转发 80 到本机即可。原理都是一样的。</p>\n\n<p>我们随便找一个 <code>HTTP -&gt; HTTPS</code> 网站做测试。</p>\n\n<p>得益于前端脚本的优势，我们把鼠标放到登录超链接上，状态栏显示的仍是原始 URL：</p>\n\n<p><img src="/img/ssl-frontend-hijack/demo1.jpg" alt=""></p>\n\n<p>在我们点击的瞬间，暗藏页面中的 XSS 钩子触发了，成功把我们带到中间人虚拟的 HTTP 登录页面里。</p>\n\n<p>当然，由于 URL 参数很多，地址栏里的那个记号看不到了。</p>\n\n<p><img src="/img/ssl-frontend-hijack/demo2.jpg" alt=""></p>\n\n<p>庆幸的是，淘宝的登录页面未进行地址判断，被降级后的页面仍然能登录成功！</p>\n\n<p><img src="/img/ssl-frontend-hijack/demo3.jpg" alt=""></p>\n\n<p>当然之前也说了，并非所有的页面都能劫持成功。</p>\n\n<p>如今越来越多的网站都已重视，因此前端的安全性检测也随之而生。仅仅通过一个工具，实现大规模通用化的劫持，未来会更加困难。</p>\n\n<p>但先比传统的纯后端实现，前后结合的方案能够带来更大的发挥空间。</p>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbedf,
       title: '2014 前端宣言',
       link: 'http://fex.baidu.com/blog/2014/08/iweb/',
       date: Sat Aug 16 2014 08:00:00 GMT+0800 (CST),
       description: '作者：zswang <br> <p>我们依旧是移动互联网时代主角！</p>\n\n<h2>背景</h2>\n\n<p>经过移动互联网浪潮的洗礼：IE6 死了、诺基亚死了、IE7、IE8 也快死了，但 HTML5 还活着而且会得越来越滋润。\n前两年在我身边有很多前端工程师开始转向 Native 开发，我自己也投入在 Android 有半年的时间。当然，选择是考虑到市场的因素，而今天：如果一个前端工程师想转 Native，我可以 <strong>不负责任地说</strong> 请看完这篇你会改变主意！</p>\n\n<h2>建议阅读人群</h2>\n\n<p>前端工程师、互联网产品设计师、互联网投资人</p>\n\n<h2>Native VS WebApp</h2>\n\n<p>这个问题虽然被说烂了，但你会发现 Native 的优势正在逐年减小。\nNative 最大优势是性能和本地能力</p>\n\n<blockquote>\n<p>What stops developers from using HTML5？<a href="http://www.visionmobile.com/blog/2013/12/html5-performance-is-fine-what-we-are-missing-is-tools/">【来源】</a>\n<img src="http://fex.baidu.com/img/light-component/webapp-issue.png" alt=""></p>\n</blockquote>\n\n<ul>\n<li>性能方面：手机换代速度远远高于 PC 时代。<a href="http://www.cnii.com.cn/mobileinternet/2014-01/06/content_1282359.htm">【评论：2014年手机硬件升级换代将加速】</a></li>\n<li>本地能力方面：各个应用平台不断扩展本地能力。以百度轻应用为例，WebApp 可以调起 Native 应用 <a href="http://clouda.com/blendapi/local/api_document">【信息来源】</a>，微信增加了分享功能的扩展。</li>\n</ul>\n\n<h2>Native 传播无法达到的成就</h2>\n\n<h3>资料</h3>\n\n<blockquote>\n<p>《围住神经猫》一名美术和一名程序员两人仅耗时一天半就完成了。7月22日下午2点游戏上线短短三天，游戏访问量已经过亿次。摘自：<a href="http://baike.baidu.com/view/14402403.htm">百度百科</a></p>\n\n<p>微信 5.0 的手机游戏《天天爱消除》非常火热。很多人会好奇《天天爱消除》昨日的累计下载量是多少，400 万次!你没有看错，这仅仅是昨天一天的量。摘自：<a href="http://net.chinabyte.com/31/12685531.shtml">《天天爱消除》下载量 Appstore 单日最高</a></p>\n</blockquote>\n\n<p>是的你没有看错，《天天爱消除》这类火爆的 Native App 单日下载量是上百万次，而《围住神经猫》这类 Web App 单日访问量上千万次，而仅仅靠两个人一天半的时间达到的成就。\n这种传播速度是任何 Native App 都无法达成的！</p>\n\n<p>《围住神经猫》的成就不是偶然，我们 FEX-END 小组一个人，花半小时也达到了这个成就！-- 《疯狂手指》。</p>\n\n<p>当然，这样比较有一些不公平，因为两种应用的受众不同 Web App 传播也得力于社交平台的推波助澜。</p>\n\n<h2>思考和总结</h2>\n\n<ul>\n<li>H5 土壤已经成熟，至少上亿用户可以正常玩耍。</li>\n<li>Web App 结合社交平台，传播的速度惊人，任何企业商家不可轻视！</li>\n<li>在 Web App 结合社交平台舞台上，期待各位同仁与我们快乐地携伴、合作、竞争、探索和分享。</li>\n<li>是否要转到 Native 开发？请谨慎思考。</li>\n<li>让做低端手机市场的厂商哭泣吧。</li>\n</ul>\n\n<h2>其他资料</h2>\n\n<ul>\n<li><a href="http://2014.html5dw.com/">iWeb 峰会介绍</a></li>\n<li><a href="http://end.baidu.com/">硬的游戏体验</a></li>\n</ul>\n\n<hr>\n\n<p>想着前端形式一片大好：兴奋得夜不能眠。此片文章送给 iWeb 峰会 的组织者和耕耘在前端界的朋友们</p>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbee0,
       title: 'HttpOnly 隐私嗅探器',
       link: 'http://fex.baidu.com/blog/2014/08/sensitive-data-sniffer/',
       date: Fri Aug 15 2014 08:00:00 GMT+0800 (CST),
       description: '作者：zjcqoo <br> <h2>0x00 前言</h2>\n\n<p>终于赶上个想写点东西的日子，原本打算继续更新那拖了好久的流量劫持系列的博客和工具。不过中午闲来无事去乌云逛了圈，发现百度的漏洞又双叒叕上头条了！而且还是那个 BDUSS 泄露的问题，记不得这已经是第几回了。尽管这事和咱没啥关系，但本着拯救世界和平的目的，还是打算去研究下：）</p>\n\n<p>既然是 cookie 泄露，无非就两种。要么就是硬伤，例如之前 Apache 就会因为太多的请求头，导致 HttpOnly 也被输出到错误页里，当然这种严重的漏洞，随着补丁的更新很快就能解决；另一个当然就是内伤，由于程序猿的粗心大意，把重要的数据不加掩盖就放到页面里了。</p>\n\n<p>前者很好解决，把在线的服务器都扫描一遍，修复一个就少一个。而后者就不那么容易了，产品经常更新迭代，谁也不能保证每次升级之后是否出现新的隐患。</p>\n\n<p>既然找不到一劳永逸的方案，不如就用最简单最原始的土办法 —— 暴力穷举：把网页一个个抓回来，看看里面是否出现隐私数据了。当然你会说这也太挫太低效了，不过事实上这种方案还是有意义的，至少能很快的找出一些明显的问题。而且在此基础上，我们还可以再做优化和改进，让它变得更完善。</p>\n\n<p>说到抓网页，大家总是先想到蜘蛛。虽然全自动化的流程是我们的终极目标，但在目前遐想阶段，就开始搞这么复杂的一套系统，还是不合适。而且如今遍地都是 AJAX 的交互网页，蜘蛛也很难爬到一些动态数据。</p>\n\n<p>所以，不如先从最简单的开始：Chrome 插件。在我们平时看网页的时候，同时对页面进行分析。这样既节省了蜘蛛服务，而且还充分利用了真实的用户行为，覆盖到更多的动态交互内容。</p>\n\n<h2>0x01 获取隐私数据</h2>\n\n<p>使用 Chrome 插件来实现这个基本功能，是非常简单的。只要得到了带 HttpOnly 的 cookie 值，在浏览页面时扫描下 HTML 字符就可以了。</p>\n\n<p>首先得获取浏览器的 cookie 数据库，得到我们想要的。例如，我们获取所有百度域下的 cookie：</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">chrome</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">getAll</span><span class="p">({</span><span class="nx">domain</span><span class="o">:</span> <span class="s1">&#39;baidu.com&#39;</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cookies</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">cookies</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div>\n<p><img src="/img/sensitive-data-sniffer/chrome_cookie.png" alt=""></p>\n\n<p>稍加过滤即可获得 HttpOnly 的数据。</p>\n\n<p>详细 API 可以<a href="https://developer.chrome.com/extensions/cookies">参考这里</a>。关于 Chrome 插件开发这里就不详细介绍了。</p>\n\n<p>值得注意的是，有些 cookie 值很简单，例如 1、true、ok 之类的；或者很常见，例如用户名、日期数字等，这些都得排除掉，否则会有太多的匹配。</p>\n\n<h2>0x02 扫描页面内容</h2>\n\n<p>有了关键字列表，我们就可以对页面内容做分析了。</p>\n\n<p>我们新建一个 content 脚本，向 background 脚本获取列表。之后在页面的 DOMContentLoaded 事件里，即可对文档的 HTML 进行关键字扫描了：</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// content.js</span>\n<span class="nx">chrome</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">sendRequest</span><span class="p">(</span><span class="s1">&#39;GET_LIST&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">)</span> <span class="p">{</span>\n\n    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n        <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">outerHTML</span><span class="p">;</span>\n\n        <span class="nx">list</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>\n            <span class="k">if</span> <span class="p">(</span><span class="nx">html</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n                <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;found: &#39;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">);</span>\n            <span class="p">}</span>\n        <span class="p">});</span>\n    <span class="p">});</span>\n<span class="p">});</span>\n\n<span class="c1">// background.js</span>\n<span class="nx">chrome</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">onRequest</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">sendResponse</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">message</span> <span class="o">==</span> <span class="s1">&#39;GET_LIST&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">sendResponse</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">});</span>\n</code></pre></div>\n<p>到此，一个最简易的隐私嗅探器完成了。我们马上就来试验下，看看是否有效果。</p>\n\n<p>先试试百度首页上的几个产品。不到 10 秒钟，就逮到了一个：</p>\n\n<p><img src="/img/sensitive-data-sniffer/demo.png" alt=""></p>\n\n<p>打开源文件一搜，果然看见了传说中带 HttpOnly 的 BDUSS：</p>\n\n<p><img src="/img/sensitive-data-sniffer/demo_src_1.png" alt=""></p>\n\n<p>赶紧测试其他页面。开始的几分钟时间里，不断发现新的泄漏点：</p>\n\n<p><img src="/img/sensitive-data-sniffer/demo_src_2.png" alt=""></p>\n\n<p><img src="/img/sensitive-data-sniffer/demo_src_3.png" alt=""></p>\n\n<p><img src="/img/sensitive-data-sniffer/demo_src_4.png" alt=""></p>\n\n<p>。。。</p>\n\n<p>不过十分钟后，出现的越来越少了。我们是不是漏了些什么东西？</p>\n\n<h2>0x03 扩大扫描范围</h2>\n\n<p>显然，如果只扫描 HTML 内容，这和爬虫有什么区别？</p>\n\n<p>我们之所以做成浏览器插件，就是为了能得到真实的用户行为操作。要是放弃了那些通过交互产生的动态数据，意义就大幅下降了。</p>\n\n<p>遗憾的是，Chrome API 里并没有获得网络数据的接口。即使是 HTML，我们也是通过 <code>&lt;html&gt;</code> 元素的 outerHTML 勉强得到的。</p>\n\n<p>不过对于 AJAX 这类请求，我们有很简单的解决方案：钩子程序。</p>\n\n<p>我们向页面中里注入一段脚本，覆盖原生 XMLHttpRequest 的方法，即可监控动态的数据了：</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">_xhr_open</span> <span class="o">=</span> <span class="nx">XMLHttpRequest</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">open</span><span class="p">;</span>\n\n<span class="kd">function</span> <span class="nx">handlerXhrReady</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">check</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">,</span> <span class="s1">&#39;XHR: &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_url</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="nx">XMLHttpRequest</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_url</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">_url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;readystatechange&#39;</span><span class="p">,</span> <span class="nx">handlerXhrReady</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="nx">_xhr_open</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>\n<span class="p">};</span>\n</code></pre></div>\n<p>当页面使用 AJAX 加载数据时，我们即可监控其中的数据了。</p>\n\n<p>类似的，我们还可以跟踪 URL 的变化，监控 HttpOnly 的数据有没有输出到地址栏里：</p>\n<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>\n\n<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;hashchange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">check</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">,</span> <span class="s1">&#39;location.hash&#39;</span><span class="p">);</span>\n<span class="p">});</span>\n\n<span class="kd">var</span> <span class="nx">_pushState</span> <span class="o">=</span> <span class="nx">History</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pushState</span><span class="p">,</span>\n    <span class="nx">_replaceState</span> <span class="o">=</span> <span class="nx">History</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">replaceState</span><span class="p">;</span>\n\n<span class="nx">History</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pushState</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">check</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="s1">&#39;pushState&#39;</span><span class="p">);</span>\n    <span class="nx">_pushState</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>\n<span class="p">};</span>\n\n<span class="nx">History</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">replaceState</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">check</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="s1">&#39;replaceState&#39;</span><span class="p">);</span>\n    <span class="nx">_replaceState</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>\n<span class="p">};</span>\n\n<span class="kd">function</span> <span class="nx">scanAddress</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">check</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">,</span> <span class="s1">&#39;location.href&#39;</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div>\n<p>对于这些调用 DOM API 的接口，我们都可以通过事件监听，或者钩子程序进行捕捉。</p>\n\n<p>我们再来测试下，很快就发现刚才遗漏的一例：</p>\n\n<p><img src="/img/sensitive-data-sniffer/demo_src_5.png" alt=""></p>\n\n<p>对于其他网站，同样也存在这类问题：</p>\n\n<p><img src="/img/sensitive-data-sniffer/demo2.png" alt=""></p>\n\n<p><img src="/img/sensitive-data-sniffer/demo2_src.png" alt=""></p>\n\n<p>多的不计其数。。。</p>\n\n<p>由于 Chrome 插件以及 DOM 规范的限制，另一种常见的内容仍无法轻易获取，那就是 JSONP 脚本。外链脚本的 text 内容是无法获得的，而且使用 JSONP 大多是为了跨域，因此通过 xhr 去代理自然不可行。如果使用纯前端解决这个问题的话，可以尝试分析 JSONP 的回调接口，并勾住它。</p>\n\n<h2>0x04 更智能的分析</h2>\n\n<p>到目前为止，我们只是用最简单的字符串匹配，来检验是否泄露。现实中，泄露点的字符稍有转义，我们就无法识别了。因此，我们需要更智能的匹配算法。</p>\n\n<p>例如某个 HttpOnly 的值为 <code>hello|1234567</code>，现实中很有可能是以 <code>hello%7C1234567</code> 的形式存在的。脚本转义、URL 转义、HTML 实体转义...所以无论在哪，符号往往是不靠谱的，但字母和数字则相对稳定的多。</p>\n\n<p>因此，我们可以提取数据中的字符数字(\\w) 部分，作为扫描项。隐私数据虽然很长，但大多都是冗余的，因此提取其中部分作为特征，仍然不会有错失。</p>\n\n<p>即使有少量误报，也没什么事。<strong>宁可误报，也不漏报。</strong></p>\n\n<p>除了转义，还有可能将隐私数据经过简单的编码之后输出了，例如 Base64。这些弱算法可以轻易还原出原始数据，但通常很难发现。</p>\n\n<p>因此，我们可以将所有的数据，事先做一些简单的算法，同时将它们也作为检测目标，这样就能更深层次的挖掘泄漏点了。</p>\n\n<h2>0x05 深度嗅探</h2>\n\n<p>事实上，除了 HttpOnly 的 cookie，我们还可以将其他数据也作为侦测目标。</p>\n\n<p>我们可以创建一个测试账号，将其手机号，密码，身份证等各种私密信息都作为待检测的隐私数据，这样就能全方位的分析出，哪些信息遭到了泄露。</p>\n\n<p>例如，曾经有网站为了偷懒，将找回密码的答案直接输出到了页面脚本变量里，而不是在后端判断。这时，我们就能很快追踪到泄漏点。</p>\n\n<h2>0x06 终极嗅探</h2>\n\n<p>更新中...</p>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbee1,
       title: 'Feature Flag 功能发布控制',
       link: 'http://fex.baidu.com/blog/2014/07/feature-flag/',
       date: Wed Jul 16 2014 08:00:00 GMT+0800 (CST),
       description: '作者：zhangtao <br> <h2>背景</h2>\n\n<p>产品在新功能发布前，可能会采取小流量测试的方式，或者在确定方案前使用A/B测试来衡量。一般开发人员会跟运维同学合作，通过一些现有平台切换机器或者流量来实现。本文介绍了另外一种简便的方式，并解释了其在持续集成上的应用，同时提供了现有的开发框架供快速使用。</p>\n\n<h2>Feature Flag VS Feature Branches</h2>\n\n<p>Feature Flag(又名 Feature Toggle、Flip等)是一种允许控制线上功能开启或者关闭的方式，通常会采取配置文件的方式来控制。提到Feature Flag一般都会跟Feature Branches进行比较。这两个有什么关联与差别呢？可以通过一个简单的示例来比较：</p>\n\n<p>假设产品需要添加一个功能，如果你在主干上进行开发，那么通常的做法是在前端开发人员在界面上添加功能，然后可能会有其他同学来完成后端服务、安全保障，最后测试及Bug修复并发布上线。如下图所示：</p>\n\n<p><img src="/img/feature-flag/new-feature.png" alt="示例1"></p>\n\n<p>上图中有个明显的问题是<strong>主干分支上在功能测试完毕之前是不能进行发布</strong>的，因为功能已经在提供在界面中，必须完备之后才能发布给用户使用。</p>\n\n<p>当然解决方法也很简单，例如我们常见的是会使用功能分支(Feature Branches)来解决。在主干上拉取一个分支，然后在分支上开完测试完之后在合并到主干上，这样就不会影响主干的持续发布了。如果有另外的新的功能那么同样拉取新的分支来解决。如下图：</p>\n\n<p><img src="/img/feature-flag/new-feature2.png" alt="示例2"></p>\n\n<p>但这样同样存在问题，如果一个功能比较复杂，开发的周期较长，而在此期间主干上已经多次修改代码，那么等分支上开发完之后合并到主干将是一个比较麻烦的工作。你必须去处理各种冲突，与其他开发人员沟通修改点。这是很多人不愿意做的。</p>\n\n<p>于是有人提供了新的方案来解决这个问题。例如将开发工作拆分成多个小块，在各个分支上开发测试完成后及时合并到主干中，并且可以先隐藏界面功能，直到所有的功能开发完成之后才展现。这样每次合并的难度就小多了；或者每次将主干上的修改都及时同步到分支上，这样分支上开发完成之后合并到主干上就简单多了。</p>\n\n<p><img src="/img/feature-flag/new-feature3.png" alt="示例3"></p>\n\n<p>但如果<strong>发布时出现bug</strong>怎么办？可能常见的是进行回滚重新上线。有什么方式既能避免分支合并的麻烦、保持主干快速迭代随时发布，又能更好的控制新功能的发布、方便的进行小流量或快速回滚操作呢？答案就是Feature Flag。</p>\n\n<p>Feature Flag允许关闭未完成的功能，你可以在主干上进行迭代开发，新功能即便未开发完成也不会影响发布，因为它对用户是<code>关闭</code>的。当功能开发完成之后，修改配置便可以让功能发布。这种操作甚至可以在线上进行，例如代码已经发布但功能不可见，你可以修改配置让功能对<strong>特定的用户</strong>(线上测试、小流量或者全量发布等)可见。如果发现新功能存在问题，那么可以通过配置文件来迅速回滚，而必须重新分支上线。Feature Flag原理示意图如下：</p>\n\n<p><img src="/img/feature-flag/featureToggle.png" alt="feature-toggle"></p>\n\n<h2>各自的优缺点</h2>\n\n<blockquote>\n<p>选择合适的方案，而不拘泥于方式本身</p>\n</blockquote>\n\n<p>并没有万能的方案，两种方式都有各自的优缺点。</p>\n\n<h3>Feature Branches</h3>\n\n<p><strong>优点</strong>：</p>\n\n<ul>\n<li>同时开发多个功能分支不会影响主干和线上代码</li>\n<li>在分支上开发新功能时不用担心对其他在开发的功能的影响</li>\n<li>现有很多持续集成系统支持分支的构建、测试、部署等</li>\n</ul>\n\n<p><strong>缺点</strong>也很明显，<a href="http://martinfowler.com/bliki/FeatureBranch.html">Martin Fowler</a>的文章中已经做了全面的阐述：</p>\n\n<ul>\n<li>分支分出去时间越长往往代码合并难度越大</li>\n<li>在一个分支中修改了函数名字可能会引入大量编译错误。这点被称为语义冲突（semantic conflict）</li>\n<li>为了减少语义冲突，会尽量少做重构。而重构是持续改进代码质量的手段。如果在开发的过程中持续不断的存在功能分支，就会阻碍代码质量的改进。</li>\n<li>一旦代码库中存在了分支，也就不再是真正的持续集成了。当然你可以给每个分支建立一个对应的CI，但它只能测试当前分支的正确性。如果在一个分支中修改了函数功能，但是在另一个分支还是按照原来的假设在使用，在合并的时候会引入bug，需要大量的时间来修复这些bug。</li>\n</ul>\n\n<h3>Feature Toggle</h3>\n\n<p><strong>优点</strong>：</p>\n\n<ul>\n<li>避免了分支合并代码冲突的问题，因为是基于主干的开发</li>\n<li>每次提交都在主干，迭代速度明显有优势</li>\n<li>新功能的整个过程都持续集成</li>\n</ul>\n\n<p><strong>缺点</strong>:</p>\n\n<ul>\n<li>未完成的功能可能会部署到线上，如果配置有误可能将未完成的功能开启。当然可以将界面层最后开发避免过早暴露。</li>\n<li>主干上担心提交代码影响其他功能。</li>\n</ul>\n\n<p>我们可以根据需要选择合适的方案。Feature Flag在避免分支合并加快迭代上有优势，另外Feature Flag除了主干开发上的支持，还有什么实用功能呢？下面来介绍。</p>\n\n<h2>Feature Flag种类与应用</h2>\n\n<p>一般Feature Flag可以分为两类，见下所示：</p>\n\n<p><strong>发布开关</strong>：</p>\n\n<ul>\n<li>在发布代码时关掉未完成的功能</li>\n<li>生存期短</li>\n<li>功能稳定就马上删除</li>\n<li>在整个开发过程中有预定义的值</li>\n</ul>\n\n<p><strong>业务开关</strong>：</p>\n\n<ul>\n<li>实现A/B测试</li>\n<li>针对特定人群发布功能尽早获得反馈</li>\n<li>针对特定条件开启或者关闭功能。例如可以设置在指定时间点开启，这样新功能将按照设定自动上线下线，无需手动上线，适合专题等情况</li>\n<li>能线上开启或者关闭,实现快速回滚</li>\n</ul>\n\n<p>发布开关主要是为了隐藏未开发完成的功能，而业务开关则可以帮助我们快速满足某些需求。例如A/B测试，Feature Flag可以轻松控制展现哪个功能，提升A/B测试的可维护性。我们也可以通过配置里面的逻辑让新功能针对小部分人群甚至是特定地域的人群发布，尽早获取功能的反馈。甚至是可以在线上开启调试，只让新功能对调试人员可见。而这些都只需要配置文件和简单的标记来实现。</p>\n\n<h2>谁在用Feature Flag</h2>\n\n<blockquote>\n<p>功能看起来很酷，但是不是新东西？有谁在用呢，我可不不愿意承担风险</p>\n</blockquote>\n\n<p>事实上Feature Flag已经在国外互联网公司中获得广泛的使用。例如FaceBook、Google等公司使用基于主干的开发模式来持续集成开发，Feature Flag是其中一个基础技术。下面这幅图展现了FaceBook开发模式转变历程,可以看到几年前facebook就开始使用Feature Toggle，使用了Feature Flag关闭主干上未开发完成的功能来保证快速迭代和高频率的发布。</p>\n\n<p><img src="/img/feature-flag/facebook.png" alt="facebook开发模式"></p>\n\n<p>国外主干开发中推荐这样一种方式：trunk作为开发主线，所有开发人员完成开发后向及时向主干提交代码，开发人员不允许在主干上拉取分支。在发布的时候由系统拉取分支发布，主干上的bug修复及时同步到发布分支。开发人员可以本地使用git等工具进行版本管理。如下图所示：</p>\n\n<p><img src="/img/feature-flag/tbd.jpg" alt="tbd"></p>\n\n<p>虽然基于主干的开发模式已经成为国外的主流，但分支开发并不是不该使用。使用分支不推荐的是让新功能代码在分支上长时间堆积，分支应当是生存周期短的。</p>\n\n<p>实际应用中我们可以根据业务场景来选择是否用功能分支还是Feature Flag，并且这两者可以相互结合。例如在文章前面提到的示例中，可以使用分支来开发细分的子功能保持分支及时合并，同时使用Feature Flag来控制功能的发布，提升工作效率。</p>\n\n<h2>最佳实践</h2>\n\n<p>除了主干开发，什么情况下选择使用Feature Flag呢？下面是使用Feature Flag的一些典型场景：</p>\n\n<ul>\n<li>在 UI 中隐藏或禁用新功能</li>\n<li>在应用程序中隐藏或禁用新组件</li>\n<li>对接口进行版本控制</li>\n<li>扩展接口</li>\n<li>支持组件的多个版本</li>\n<li>将新功能添加到现有应用程序</li>\n<li>增强现有应用程序中的现有功能</li>\n</ul>\n\n<p>可以看到，由于Feature Flag本身是对业务功能的控制，所以不适于功能大范围的改动等情况。另外使用过程中需要注意一些问题：</p>\n\n<ul>\n<li>只在需要的地方创建开关。美酒虽豪，不可贪杯。滥用任何技术都会出现问题。</li>\n<li>控制开关的数量。同上，开关应按需使用并及时清除。</li>\n<li>开关之间代码保持独立。如果代码存在依赖就没法删除，最终维护性反而变差</li>\n<li>清除发布开关和废弃代码。发布开关应当在功能稳定后删除，旧代码也是。</li>\n<li>界面层最后暴露。</li>\n</ul>\n\n<h2>如何实现</h2>\n\n<p>实现这套东西复杂吗？下面以php和smarty模板为例来介绍。</p>\n\n<p>首先需要一套控制代码逻辑的工具，虽然开源的框架有在后端代码层的支持，但推荐在模板层使用Feature Flag，因为模板直接跟功能挂钩，维护起来更加直观方便。</p>\n\n<p>例如我们会提供一个smarty插件，让你控制相应的展现:</p>\n\n<p><img src="/img/feature-flag/feature-smarty.png" alt="feature-smarty.png"></p>\n\n<p>这个代码的意思是如果common模块的featureA命中，则展现下面代码，否则展现另外一套代码，展现代码由于与功能相关，所以就相当于控制了展现哪个功能。当然你也可以不用<code>featureelse</code>只控制功能的开启或者关闭。</p>\n\n<p>另外我们需要一个配置文件，对应featureA的配置，如下所示：</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript">  <span class="p">{</span>\n      <span class="s2">&quot;features&quot;</span> <span class="o">:</span> <span class="p">{</span>\n          <span class="s2">&quot;featureA&quot;</span> <span class="o">:</span> <span class="p">{</span>\n              <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;switch&quot;</span><span class="p">,</span>\n              <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="s2">&quot;on&quot;</span><span class="p">,</span>\n              <span class="s2">&quot;desc&quot;</span> <span class="o">:</span> <span class="s2">&quot;test switch feature work or not&quot;</span>\n          <span class="p">}</span>\n      <span class="p">}</span>\n  <span class="p">}</span>\n</code></pre></div>\n<p>featureA配置的value是<code>on</code>，开关类型是<code>switch</code>。也就是说这个功能是开启的。与switch类似的可以实现多个feature类型，例如抽样控制、日期控制、地域控制等，代码逻辑只需要根据value的设定判断是true还是false。例如抽样类型，value设置0.5，那么对应的类型逻辑只需要判断随机数是否在0-0.5范围内而已。</p>\n\n<p>部署中我们只需要修改featureA的配置就可以控制功能的发布，是不是so easy!</p>\n\n<h2>开发框架</h2>\n\n<p>有哪些相应的开源框架呢？几乎各种语言都有相应的实现。例如FEX <a href="http://fis.baidu.com">FIS</a>小组提供了基于php和node.js的框架。此外还有多种语言的开源实现：</p>\n\n<table><thead>\n<tr>\n<th>语言</th>\n<th>Feature Flag框架</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><strong>php</strong></td>\n<td>基于smarty的<a href="https://github.com/wangcheng714/feature-flag">Feature Flag框架</a></td>\n</tr>\n<tr>\n<td><strong>NodeJs</strong></td>\n<td>基于Node前后端解决方案Yogurt的<a href="https://github.com/fex-team/yog-feature">Feature Flag框架</a></td>\n</tr>\n<tr>\n<td>java</td>\n<td><a href="http://www.togglz.org/">Togglz</a></td>\n</tr>\n<tr>\n<td>.NET</td>\n<td><a href="https://github.com/jason-roberts/FeatureToggle">FeatureToggle</a></td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td><a href="https://github.com/FetLife/rollout">Rollout</a>、<a href="https://github.com/jamesgolick/degrade">Degrade</a></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><a href="https://github.com/disqus/gargoyle">Gargoyle</a>、<a href="https://github.com/disqus/nexus">Nexus admin</a></td>\n</tr>\n<tr>\n<td>Groovy</td>\n<td><a href="https://github.com/ryannorris/grails-feature-toggle">GrailsFeatureToggle</a></td>\n</tr>\n</tbody></table>\n\n<h2>总结</h2>\n\n<ul>\n<li>Feature Flag与Feature Branches各有优势，结合使用能发挥更大作用</li>\n<li>结合业务场景选择合适方案</li>\n<li>Feature Flag能支持主干开发，并在控制功能发布上有独特优势</li>\n</ul>\n\n<h2>参考资料</h2>\n\n<ul>\n<li><a href="http://msdn.microsoft.com/zh-cn/magazine/dn683796.aspx">采用功能切换进行软件开发</a></li>\n<li><a href="http://www.infoq.com/cn/articles/function-switch-realize-better-continuous-implementations">使用功能开关更好地实现持续部署</a></li>\n<li><a href="http://martinfowler.com/bliki/FeatureToggle.html">FeatureToggle</a></li>\n<li><a href="http://www.slideshare.net/HendrikEbbers/feature-driven-development-35863636?qid=2a29fcc2-9c8c-404f-ae41-d4dc7494d278&amp;v=qf1&amp;b=&amp;from_search=5">Feature driven development</a></li>\n<li><a href="http://blog.pluralsight.com/favor-feature-toggles-over-feature-branches">Favor Feature Toggles over Feature Branches</a></li>\n<li><a href="http://paulhammant.com/2013/04/05/what-is-trunk-based-development/">What is Trunk Based Development?</a></li>\n<li><a href="http://abhishek-tiwari.com/post/decoupling-deployment-and-release-feature-toggles">Decoupling Deployment and Release- Feature Toggles</a></li>\n</ul>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 },
     { _id: 54970f7fee3442d416adbee2,
       title: '实现动态验证码的思路',
       link: 'http://fex.baidu.com/blog/2014/07/captcha-gif/',
       date: Wed Jul 02 2014 08:00:00 GMT+0800 (CST),
       description: '作者：zswang <br> <h2>示例</h2>\n\n<p><img src="/img/captcha-gif/201407-captcha.gif" alt="示例1"></p>\n\n<p><img src="/img/captcha-gif/zswang-captcha.gif" alt="示例2"></p>\n\n<h2>背景</h2>\n\n<p>验证码主要是防止机器暴力破解。之前的验证码都是以静态为主，现在一些产品开始使用动态方式，增加破解的难度。动态方式以 gif 最为简单可靠。gif 兼容性好，尺寸小。这里分享的就是一种：用 JS 实现 gif 动态验证码的思路。感谢关注。</p>\n\n<h2>任务分解</h2>\n\n<ol>\n<li> 绘制旋转的文字</li>\n<li> 计算每个字符出现位置和角度</li>\n<li> 生成 gif 图片</li>\n</ol>\n\n<h2>逐步求精</h2>\n\n<h3>如何绘制旋转的文字？</h3>\n\n<p>了解能用的 API</p>\n\n<ul>\n<li><code>context.rotate(angle)</code> 使当前坐标系旋转 angle，单位弧度</li>\n<li><code>context.translate(x, y)</code> 使当前坐标系偏移 x, y，单位像素</li>\n<li><code>context.font</code> 设置字体</li>\n<li><code>context.strokeText(text, x, y [, maxWidth ])</code> 给文本描边</li>\n<li><code>context.fillText(text, x, y [, maxWidth ])</code> 给文本填充</li>\n</ul>\n\n<p>怎么以文字的中心位置旋转？</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">void</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n  <span class="c1">// ...</span>\n  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>\n  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>\n  <span class="kd">var</span> <span class="nx">angle</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">8</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="nx">angle</span><span class="p">);</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">strokeText</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n  <span class="c1">// ...</span>\n<span class="p">}()</span>\n</code></pre></div>\n<p>以文字的左下角为圆心旋转，不符合预期，见下图效果</p>\n\n<p><img src="/img/captcha-gif/demo1.gif" alt="示例1"></p>\n\n<p>本打算做一下偏移的计算，一想到要计算文本中心位置貌似还挺复杂。\n还是看看其他人怎么做的，通过关键词 <code>canvas rotate text center</code> 找到一点线索。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>\n<span class="nx">context</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">newx</span><span class="p">,</span> <span class="nx">newy</span><span class="p">);</span>\n<span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>\n<span class="nx">context</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="s2">&quot;center&quot;</span><span class="p">;</span>\n<span class="nx">context</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="s2">&quot;Your Label Here&quot;</span><span class="p">,</span> <span class="nx">labelXposition</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n<span class="nx">context</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>\n</code></pre></div>\n<p><code>textAlign</code> 是横向对齐，再根据标准找到了一个纵向对齐 <code>textBaseline</code></p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">void</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n  <span class="c1">// ...</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">;</span> <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt; insert</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="s1">&#39;middle&#39;</span><span class="p">;</span> <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt; insert</span>\n  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>\n  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>\n  <span class="kd">var</span> <span class="nx">angle</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">8</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="nx">angle</span><span class="p">);</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">strokeText</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n  <span class="c1">// ...</span>\n<span class="p">}()</span>\n</code></pre></div>\n<p>修改以后，效果符合预期，见下图：</p>\n\n<p><img src="/img/captcha-gif/demo2.gif" alt="示例2"></p>\n\n<p>按我的习惯就这种 “常用” 功能就封装成独立函数，方便以后使用。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="cm">/**</span>\n<span class="cm"> * 绘制旋转的文字</span>\n<span class="cm"> * @param {CanvasRenderingContext2D} context 上下文</span>\n<span class="cm"> * @param {String} text 文本</span>\n<span class="cm"> * @param {Number} x 中心坐标 x</span>\n<span class="cm"> * @param {Number} y 中心坐标 y</span>\n<span class="cm"> * @param {Number} angle 角度，单位弧度</span>\n<span class="cm"> */</span>\n<span class="kd">function</span> <span class="nx">rotateText</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">angle</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span> <span class="c1">// 保存上次的风格设置</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">;</span> <span class="c1">// 横向居中</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="s1">&#39;middle&#39;</span><span class="p">;</span> <span class="c1">// 纵向居中</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 修改坐标系原点</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="nx">angle</span><span class="p">);</span> <span class="c1">// 旋转</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">strokeText</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// 绘制文本</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span> <span class="c1">// 恢复上次的风格设置</span>\n<span class="p">}</span>\n</code></pre></div>\n<h3>如何计算每个字符出现位置和角度？</h3>\n\n<p>背景文字左右平移 + 旋转，生成随机的字符串计算中心坐标就好了</p>\n\n<p>前景文字基本相似，只要上下来回移动和稍微摇摆，这里用的 cos 曲线控制摇摆。</p>\n\n<h3>如何生成 gif 图片</h3>\n\n<p>生成 gif 有第三方库可以使用 gifjs。\n这里要注意的是，gifjs 用到 worker 技术，所以得在 <code>http://</code> 环境里调试，不能用 <code>file://</code> 环境</p>\n\n<p>注意：由于添加的是同一个 canvas 对象，所以的是使用 <code>copy</code> 模式，将图像数据保留给每一帧。</p>\n<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">gif</span><span class="p">.</span><span class="nx">addFrame</span><span class="p">(</span><span class="nx">canvasTemp</span><span class="p">,</span> <span class="p">{</span> <span class="nx">delay</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">copy</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>\n</code></pre></div>\n<h2>完整代码</h2>\n\n<ul>\n<li><a href="http://jssdk.com/demo/captcha-gif.html">线上演示</a></li>\n<li><a href="https://github.com/zswang/zswang.github.com/blob/master/demo/captcha-gif.html">代码地址</a></li>\n</ul>\n<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>\n<span class="nt">&lt;html&gt;</span>\n<span class="nt">&lt;head&gt;</span>\n  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>\n  <span class="nt">&lt;style&gt;</span>\n<span class="nt">canvas</span> <span class="p">{</span>\n  <span class="k">border</span><span class="o">:</span> <span class="nb">black</span> <span class="m">1px</span> <span class="k">solid</span><span class="p">;</span>\n<span class="p">}</span>\n  <span class="nt">&lt;/style&gt;</span>\n  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../library/gif.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>\n<span class="nt">&lt;/head&gt;</span>\n<span class="nt">&lt;body&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    Key: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">maxlength=</span><span class="s">&quot;8&quot;</span> <span class="nt">/&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;build&quot;</span> <span class="nt">/&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;70&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>\n  <span class="nt">&lt;img</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;70&quot;</span> <span class="nt">/&gt;&lt;a</span> <span class="na">download=</span><span class="s">&quot;captcha.gif&quot;</span><span class="nt">&gt;</span>download...<span class="nt">&lt;/a&gt;</span>\n  <span class="nt">&lt;script&gt;</span>\n\n<span class="cm">/**</span>\n<span class="cm"> * 绘制旋转的文字</span>\n<span class="cm"> * @param {CanvasRenderingContext2D} context 上下文</span>\n<span class="cm"> * @param {String} text 文本</span>\n<span class="cm"> * @param {Number} x 中心坐标 x</span>\n<span class="cm"> * @param {Number} y 中心坐标 y</span>\n<span class="cm"> * @param {Number} angle 角度，单位弧度</span>\n<span class="cm"> */</span>\n<span class="kd">function</span> <span class="nx">rotateText</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">angle</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span> <span class="c1">// 保存上次的风格设置</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">;</span> <span class="c1">// 横向居中</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="s1">&#39;middle&#39;</span><span class="p">;</span> <span class="c1">// 纵向居中</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 修改坐标系原点</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="nx">angle</span><span class="p">);</span> <span class="c1">// 旋转</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">strokeText</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// 绘制文本</span>\n  <span class="nx">context</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span> <span class="c1">// 恢复上次的风格设置</span>\n<span class="p">}</span>\n\n<span class="cm">/**</span>\n<span class="cm"> * 随机字符串</span>\n<span class="cm"> * @param{String} chars 字符串</span>\n<span class="cm"> * @param{Number} len 长度</span>\n<span class="cm"> */</span>\n<span class="kd">function</span> <span class="nx">randomText</span><span class="p">(</span><span class="nx">chars</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">result</span> <span class="o">+=</span> <span class="nx">chars</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">chars</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()));</span>\n  <span class="p">}</span>\n  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="k">void</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n  <span class="c1">// @see http://www.w3.org/TR/2dcontext/</span>\n  <span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>\n  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>\n\n  <span class="nx">context</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="s1">&#39;30px Verdana&#39;</span><span class="p">;</span> <span class="c1">// 字体大小和字体名</span>\n\n  <span class="kd">var</span> <span class="nx">lineHeight</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span> <span class="c1">// 行高</span>\n  <span class="kd">var</span> <span class="nx">backLength</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>\n  <span class="kd">var</span> <span class="nx">backTexts</span> <span class="o">=</span> <span class="p">{};</span>\n  <span class="kd">var</span> <span class="nx">backXOffsets</span> <span class="o">=</span> <span class="p">{};</span>\n  <span class="kd">var</span> <span class="nx">keyYOffsets</span> <span class="o">=</span> <span class="p">{};</span>\n  <span class="kd">var</span> <span class="nx">keyAOffsets</span> <span class="o">=</span> <span class="p">{};</span>\n  <span class="kd">var</span> <span class="nx">backSpeed</span> <span class="o">=</span> <span class="mi">10000</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>\n  <span class="kd">var</span> <span class="nx">keySpeed</span> <span class="o">=</span> <span class="mi">12000</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>\n  <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>\n\n  <span class="kd">function</span> <span class="nx">init</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">key</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">();</span>\n    <span class="c1">// 随机备件</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="nx">lineHeight</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">backTexts</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">randomText</span><span class="p">(</span><span class="s1">&#39;ABCDEFGHIJKLMNOPQRST0123456789&#39;</span><span class="p">,</span> <span class="nx">backLength</span><span class="p">);</span>\n      <span class="nx">backXOffsets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">keyYOffsets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">lineHeight</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>\n      <span class="nx">keyAOffsets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.05</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">;</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">renderBack</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">xOffset</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">tick</span> <span class="o">=</span> <span class="nx">now</span> <span class="o">%</span> <span class="nx">backSpeed</span><span class="p">;</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">backLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n      <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="p">(</span><span class="nx">xOffset</span> <span class="o">+</span> <span class="p">(</span><span class="nx">tick</span> <span class="o">/</span> <span class="nx">backSpeed</span><span class="p">)</span> <span class="o">*</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> \n        <span class="p">(</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="nx">backLength</span><span class="p">)</span> <span class="o">*</span> <span class="nx">i</span><span class="p">)</span> <span class="o">%</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>\n      <span class="nx">rotateText</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">text</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span>\n          <span class="nx">i</span> <span class="o">/</span> <span class="nx">backLength</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="nx">tick</span> <span class="o">/</span> <span class="nx">backSpeed</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;#FFFFFF&#39;</span><span class="p">;</span>\n    <span class="nx">context</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>\n    <span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;#000000&#39;</span><span class="p">;</span>\n\n    <span class="c1">// 绘制背景文字</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="nx">lineHeight</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">renderBack</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">backTexts</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">lineHeight</span> <span class="o">*</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">backXOffsets</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>\n    <span class="p">}</span>\n\n    <span class="c1">// 绘制 key</span>\n    <span class="kd">var</span> <span class="nx">tick</span> <span class="o">=</span> <span class="nx">now</span> <span class="o">%</span> <span class="nx">keySpeed</span><span class="p">;</span>\n    <span class="kd">var</span> <span class="nx">keyCharWidth</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>\n      <span class="kd">var</span> <span class="nx">tx</span> <span class="o">=</span> <span class="nx">keyCharWidth</span> <span class="o">+</span> <span class="p">(((</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="nx">keyCharWidth</span><span class="p">)</span> <span class="o">/</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">*</span> <span class="nx">i</span><span class="p">)</span> <span class="o">%</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>\n      <span class="kd">var</span> <span class="nx">ty</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">now</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="nx">keyYOffsets</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>\n      <span class="nx">rotateText</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">key</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">tx</span><span class="p">,</span>\n        <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="nx">ty</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">now</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="mf">0.1</span> <span class="o">+</span> <span class="nx">keyAOffsets</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n  <span class="nx">init</span><span class="p">(</span><span class="s1">&#39;zswang&#39;</span><span class="p">);</span>\n  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">render</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">),</span> <span class="nx">context</span><span class="p">);</span>\n  <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>\n\n\n  <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;input[type=text]&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">init</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>\n  <span class="p">});</span>\n\n  <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;input[type=button]&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>\n    <span class="nx">self</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="kd">var</span> <span class="nx">gif</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GIF</span><span class="p">({</span>\n      <span class="nx">repeat</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>\n      <span class="nx">workers</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>\n      <span class="nx">quality</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>\n      <span class="nx">workerScript</span><span class="o">:</span> <span class="s1">&#39;../library/gif.worker.js&#39;</span>\n    <span class="p">});</span>\n\n    <span class="c1">// 生成 gif 图片</span>\n    <span class="kd">var</span> <span class="nx">canvasTemp</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>\n    <span class="nx">canvasTemp</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>\n    <span class="nx">canvasTemp</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>\n    <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvasTemp</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>\n    <span class="nx">context</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="s1">&#39;30px Verdana&#39;</span><span class="p">;</span> <span class="c1">// 字体大小和字体名</span>\n    <span class="nx">context</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">;</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5000</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">render</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>\n      <span class="nx">gif</span><span class="p">.</span><span class="nx">addFrame</span><span class="p">(</span><span class="nx">canvasTemp</span><span class="p">,</span> <span class="p">{</span> <span class="nx">delay</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">copy</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>\n    <span class="p">}</span>\n    <span class="nx">gif</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;finished&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">blob</span><span class="p">)</span> <span class="p">{</span>\n      <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>\n      <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>\n      <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>\n      <span class="nx">self</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n    <span class="p">});</span>\n    <span class="nx">gif</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="p">}();</span>\n  <span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;/body&gt;</span>\n<span class="nt">&lt;/html&gt;</span>\n</code></pre></div>\n<h2>后记</h2>\n\n<p>功能比较简单，也写得比较简单，仅供参考。如果要应用到实战，还有很多细节要考虑</p>\n\n<ul>\n<li>gif 创建的过程必然得放到后端完成，否则 兼容性、性能、安全性 都是问题（这块和传统的验证过程并无区别）。</li>\n<li>缓存（背景效果可以重复利用一段时间）。</li>\n<li>图片大小需要优化，目前是 200K（通过调整帧率和压缩比）。</li>\n<li>提供方便的调用接口（模块化）。</li>\n</ul>\n\n<h2>参考资料</h2>\n\n<ul>\n<li><a href="http://www.w3.org/TR/2dcontext/">HTML Canvas 2D Context</a></li>\n<li><a href="https://github.com/jnordberg/gif.js">JavaScript GIF encoding library</a></li>\n<li><a href="http://stackoverflow.com/questions/3167928/drawing-rotated-text-on-a-html5-canvas">Drawing rotated text on a HTML5 canvas</a></li>\n</ul>',
       _category: 54970f7d68284bd3169e3237,
       __v: 0 } ] }